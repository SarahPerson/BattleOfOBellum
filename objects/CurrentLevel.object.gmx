<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//selectedChar = noone; //noone = null?
show_message("Move with arrow keys# select character with shift # move character with enter");
var i;
var temptile;

roomTiles = ds_grid_create(room_width/16, room_height/16);

for(i = 0; i &lt;instance_number(Tile); i += 1){
    temptile = instance_find(Tile,i);
    roomTiles[temptile.x/16,temptile.y/16] = temptile;
    //temptile.sprite_index = HLTile;
}

instance_create(0,0, PlayerOne);

    //if(alarm[0]==-1)
    //{
    //alarm[0]= room_speed*(0.5);
    //}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////////////////////////////////////////////////////////////
curX = 5//selectedChar.xCord;
curY = 5//selectedChar.yCord;
totMove = 4//selectedChar.movement;
maxSize = room_width/16;
toLook = ds_queue_create();
ds_queue_enqueue(toLook, roomTiles[curX, curY]);

while(!ds_queue_empty(toLook)){
curTile = ds_queue_dequeue(toLook)
curX = curTile.x/16;
curY = curTile.y/16;

if(curTile.color !=  2){
    if(curTile.currentCost &lt;= totMove){
        curTile.canMove = true;
        if(curX + 1 &lt; maxSize){
            roomTiles[curX + 1, curY].currentCost = roomTiles[curX + 1, curY].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX + 1, curY]);
        }if(curX - 1 &gt;= 0){
            roomTiles[curX - 1, curY].currentCost = roomTiles[curX - 1, curY].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX - 1, curY]);
        }if(curY + 1 &lt; maxSize){
            roomTiles[curX, curY + 1].currentCost = roomTiles[curX, curY + 1].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX, curY + 1]);
        }if(curY - 1 &gt;= 0){
            roomTiles[curX, curY - 1].currentCost = roomTiles[curX, curY - 1].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX, curY - 1]);
            }
        }
        curTile.color = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//selectedChar = noone; //noone = null?
show_message("BFS Start");


curX = 5//selectedChar.xCord;
curY = 5//selectedChar.yCord;
totMove = 4//selectedChar.movement;
maxSize = room.width/16;
toLook = ds_queue_create();
ds_queue_enqueue(toLook, roomTiles[curX, curY]);


while(ds_queue_empty(toLook)){
curTile = ds_queue_dequeue(toLook)
if(curTile.color !=  2){
    if(curTile.currentCost &lt;= totMove){
        curTile.canMove = true;
        if(curX + 1 &lt; maxSize){
            roomTiles[curX + 1, curY].currentCost = roomTiles[curX + 1, curY].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX + 1, curY]);
        }if(curX - 1 &gt;= 0){
            roomTiles[curX - 1, curY].currentCost = roomTiles[curX - 1, curY].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX - 1, curY]);
        }if(curY + 1 &lt; maxSize){
            roomTiles[curX, curY + 1].currentCost = roomTiles[curX, curY + 1].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX, curY + 1]);
        }if(curY - 1 &gt;= 0){
            roomTiles[curX, curY - 1].currentCost = roomTiles[curX, curY - 1].cost + curTile.currentCost;
            ds_queue_enqueue(toLook, roomTiles[curX, curY - 1]);
            }
        }
        curTile.color = 2;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
