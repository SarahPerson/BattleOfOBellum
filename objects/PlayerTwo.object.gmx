<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player Two
key_up = ord("W"); // up on board
key_down = ord("S"); //for down on board
key_right = ord("D"); //for right on board
key_left  = ord("A"); //for left on board
key_select = vk_alt; //for select key
 key_enter = vk_space; //for enter key 
 
gp_up= gp_padu;
gp_down = gp_padd;
gp_right = gp_padr;
gp_left = gp_padl;
gp_padselect = gp_face1;
gp_enter = gp_face2;   
 
 //set starting position
curRow = 3;
curCol =10;
canMove=true;
canSelect=true;
isHighlighted=false;

global.roomTiles[curCol,curRow].playerTwoSelected=true;

//Setting the team
global.teamTwo[0] = characterTwo;
characterSelected = 0;

//queue of highlighted tiles
highlightedTiles = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can move - delay
canMove = true;
canSelect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
//Move highlighted tile to where current location of player

if(keyboard_check(key_down)|| gamepad_button_check(0,gp_down))
{
    if(canMove){
    global.roomTiles[curCol,curRow].playerTwoSelected=false;
    if(curRow&lt;global.roomSize-1)
        curRow++;
    global.roomTiles[curCol,curRow].playerTwoSelected=true;

    canMove=false;
    }
    if(alarm[0]==-1)
    {
       alarm[0]= room_speed*(0.1);
    }
    
}
if(keyboard_check(key_right)|| gamepad_button_check(0,gp_right))
{
    if(self.canMove){
    global.roomTiles[curCol,curRow].playerTwoSelected=false;
    if(curCol&lt;global.roomSize-1)    
        curCol++;
    global.roomTiles[curCol,curRow].playerTwoSelected=true;

    canMove=false;

    }
    if(alarm[0]==-1)
    {
       alarm[0]= room_speed*(0.1);
    }

}
if(keyboard_check(key_left)|| gamepad_button_check(0,gp_left))
{
    if(self.canMove){
    global.roomTiles[curCol,curRow].playerTwoSelected=false;
    if (curCol&gt;0)
        curCol--;
    global.roomTiles[curCol,curRow].playerTwoSelected=true;

    canMove=false;

    }
    if(alarm[0]==-1)
    {
       alarm[0]= room_speed*(0.1);
    }
}

if(keyboard_check(key_up)|| gamepad_button_check(0,gp_up))
{

    if(canMove){
    global.roomTiles[curCol,curRow].playerTwoSelected=false;
    if(curRow&gt;0)
        curRow--;
    global.roomTiles[curCol,curRow].playerTwoSelected=true;

    canMove=false;
    }
    if(alarm[0]==-1)
    {
       alarm[0]= room_speed*(0.1);
    }

}


    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display possible Character Movement
if(keyboard_check(key_select)|| gamepad_button_check(0,gp_padselect))
{
var i = 0;
    if(canSelect)
    {
for(i = 0; i&lt;global.teamSize;i++){
        if(isHighlighted==false &amp;&amp; self.curCol == global.teamTwo[i].x/16 &amp;&amp; self.curRow == global.teamTwo[i].y/16){
            ds_queue_clear(highlightedTiles); //clear stored tiles for highlighting
            selectedCharacter = i;
            global.teamTwo[i].isSelected = true; //variable to hold if this is the current character being moved
            curX = self.curCol//selectedChar.xCord;
            curY = self.curRow//selectedChar.yCord;
            totMove = 4//selectedChar.movement;
            maxSize = room_width/16;
            toLook = ds_queue_create();
            ds_queue_enqueue(toLook, global.roomTiles[curX, curY]);
            
            while(!ds_queue_empty(toLook)){
                curTile = ds_queue_dequeue(toLook)
                curX = curTile.x/16;
                curY = curTile.y/16;
            
                if(curTile.color !=  2){
                    if(curTile.currentCost &lt;= totMove){
                        curTile.canMove = true;
                        if(curX + 1 &lt; maxSize){ 
                            global.roomTiles[curX + 1, curY].currentCost = global.roomTiles[curX + 1, curY].cost + curTile.currentCost;
                            ds_queue_enqueue(toLook, global.roomTiles[curX + 1, curY]);
                        }if(curX - 1 &gt;= 0){
                            global.roomTiles[curX - 1, curY].currentCost = global.roomTiles[curX - 1, curY].cost + curTile.currentCost;
                            ds_queue_enqueue(toLook, global.roomTiles[curX - 1, curY]);
                        }if(curY + 1 &lt; maxSize){
                            global.roomTiles[curX, curY + 1].currentCost = global.roomTiles[curX, curY + 1].cost + curTile.currentCost;
                            ds_queue_enqueue(toLook, global.roomTiles[curX, curY + 1]);
                        }if(curY - 1 &gt;= 0){
                            global.roomTiles[curX, curY - 1].currentCost = global.roomTiles[curX, curY - 1].cost + curTile.currentCost;
                            ds_queue_enqueue(toLook, global.roomTiles[curX, curY - 1]);
                            }
                        }
                        curTile.color = 2;
                        ds_queue_enqueue(highlightedTiles, curTile);
                    }
                }
    
                isHighlighted=true;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            if(isHighlighted==true &amp;&amp; global.teamTwo[i].isSelected==true)
            {
                global.teamTwo[i].isSelected=false;
                 while(!ds_queue_empty(toLook)){
                    curTile = ds_queue_dequeue(toLook);
                    curTile.canMove = false;
                    curTile.color=0;
                    curTile.currentCost = 0;
                }
                /*
                var i;
                var j;
                for (i = 0; i &lt; maxSize; i += 1){
                    for(j=0; j&lt;maxSize; j+=1){
                        global.roomTiles[i,j].canMove=false;
                        global.roomTiles[i,j].color=0;
                        global.roomTiles[i,j].currentCost = 0;
                    }
                }
                */
                isHighlighted=false;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            
        } 

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Character 
if(keyboard_check(key_enter)|| gamepad_button_check(0,gp_enter)){
    if(isHighlighted==true  &amp;&amp; global.roomTiles[curCol, curRow].canMove==true &amp;&amp; global.teamTwo[selectedCharacter].isSelected ){    
        global.teamTwo[selectedCharacter].x =curCol*sprite_get_width(global.teamTwo[selectedCharacter].sprite_index);
        global.teamTwo[selectedCharacter].y = curRow*sprite_get_height(global.teamTwo[selectedCharacter].sprite_index);
        
        var i;
        var j;
        for (i = 0; i &lt; maxSize; i += 1){
            for(j=0; j&lt;maxSize; j+=1){
                global.roomTiles[i,j].canMove=false;
                global.roomTiles[i,j].color=0;
                global.roomTiles[i,j].currentCost = 0;
            }
        }
        isHighlighted=false;
        global.teamTwo[selectedCharacter].isSelected = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
