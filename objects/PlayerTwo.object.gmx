<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player Two
key_up = ord("W"); // up on board
key_down = ord("S"); //for down on board
key_right = ord("D"); //for right on board
key_left  = ord("A"); //for left on board
key_select = vk_alt; //for select key
 key_enter = vk_space; //for enter key 
 
gp_up= gp_padu;
gp_down = gp_padd;
gp_right = gp_padr;
gp_left = gp_padl;
gp_padselect = gp_face1;
gp_enter = gp_face2;   
 
 //set starting position
curRow = 14;
curCol =7;
canMove=true;
canSelect=true;
isHighlighted=false;

//global.roomTiles[curCol,curRow].playerTwoSelected=true;

//Setting the team
//global.teamTwo[0].sprite_index = Soldier;
global.teamTwo[0].originRow = global.mapSize-global.mapSize+1;
global.teamTwo[0].originCol = global.mapSize-6;
//global.teamTwo[1].sprite_index = Soldier;
global.teamTwo[1].originRow = global.mapSize-global.mapSize+1;
global.teamTwo[1].originCol =global.mapSize-7;
//global.teamTwo[2].sprite_index = Soldier;
global.teamTwo[2].originRow = global.mapSize-global.mapSize+1;
global.teamTwo[2].originCol = global.mapSize-8;
//global.teamTwo[3].sprite_index = Soldier;
global.teamTwo[3].originRow = global.mapSize-global.mapSize+1;
global.teamTwo[3].originCol = global.mapSize-9;
characterSelected = 0;


//queue of highlighted tiles
highlightedTiles = ds_queue_create();

//Setting up menu controls
inMenu = false;
currentIncrement = 0;

//setting drafting controls
draftCanMove=true;
draftRow = 0;
draftCol = 0;

draftColMax =11;
draftRowMax =1

//Set up drafting
draftCount=0;

//set up bonus screen shtuff
maxBonusButtons = 3;
isSelectingCharacterForBonus = false;
bonusColMax = 5;
bonusRowMax = 1;
bonusCol=0;
bonusRow=0;
bonusCanMove= true;

//set bonus varibles
if(room==BonusScreen){lvPoints = 10;}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set drafting move delay
draftCanMove= true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can move - delay
canMove = true;
canSelect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Character 
if(!global.setup){
if(keyboard_check(key_enter)|| gamepad_button_check(0,gp_enter) &amp;&amp; room == SplitScreen){
    if(isHighlighted==true  &amp;&amp; global.gridTwo[curCol, curRow].canMove==true &amp;&amp; global.teamTwo[selectedCharacter].isSelected ){    
        global.teamTwo[selectedCharacter].destTile = global.gridTwo[curCol, curRow];
        var dx = global.gridTwo[curCol, curRow].originTile.x - global.gridTwo[curCol, curRow].x;
        var dy = global.gridTwo[curCol, curRow].originTile.y - global.gridTwo[curCol, curRow].y;
        if(dx != 0 || dy != 0){
            if(dx == 0){
                if(dy &lt; 0){ global.teamTwo[selectedCharacter].destTile.originDirect = 3;}
                else { global.teamTwo[selectedCharacter].destTile.originDirect = 4;}
            } else {
                if(dx &lt; 0) {global.teamTwo[selectedCharacter].destTile.originDirect = 1;}
                else {global.teamTwo[selectedCharacter].destTile.originDirect = 2;}
            }
        }
        GameMaster.toMove = global.teamTwo[selectedCharacter];
        if(GameMaster.alarm[2] == -1){ GameMaster.alarm[2] = room_speed*(.05); }
        
        var i;
        var j;
        for (i = 0; i &lt; maxSize; i += 1){
            for(j=0; j&lt;maxSize; j+=1){
                global.gridTwo[i,j].canMove=false;
                global.gridTwo[i,j].color=0;
                global.gridTwo[i,j].currentCost = 10;
                //global.roomTiles[i,j].originTile = 0;
            }
        }
        isHighlighted=false;
        global.teamTwo[selectedCharacter].isSelected = false;
    }
} 
}else if(isHighlighted==true  &amp;&amp; room == SplitScreen &amp;&amp; (keyboard_check(key_enter)|| gamepad_button_check(0,gp_enter))){
    if(global.gridTwo[curCol, curRow].canMove==true &amp;&amp; global.teamTwo[selectedCharacter].isSelected){
        global.teamTwo[selectedCharacter].x = global.gridTwo[curCol, curRow].x;
        global.teamTwo[selectedCharacter].y = global.gridTwo[curCol, curRow].y;
        global.teamTwo[selectedCharacter].originRow = global.mapSize-curRow-1;
        global.teamTwo[selectedCharacter].originCol = global.mapSize-curCol-1;
        
        GameMaster.copyTeamTwo[selectedCharacter].x = global.roomTiles[global.mapSize - curCol - 1, global.mapSize - curRow - 1].x;
        GameMaster.copyTeamTwo[selectedCharacter].y = global.roomTiles[global.mapSize - curCol - 1, global.mapSize - curRow - 1].y;
    }  
} else if(global.PlayerWon == 2 &amp;&amp; global.setup &amp;&amp; global.setFlag &amp;&amp; (keyboard_check(key_enter)|| gamepad_button_check(0,gp_enter))){
   PlayerTwoObject.x = global.gridTwo[curCol, curRow].x;
   PlayerTwoObject.y = global.gridTwo[curCol, curRow].y;
   PlayerTwoObject.originRow = curRow;
   PlayerTwoObject.originCol = curCol;
   
   GameMaster.PlayerTwoObjectiveCopy.x = global.roomTiles[global.mapSize - curCol - 1, global.mapSize - curRow - 1].x;
   GameMaster.PlayerTwoObjectiveCopy.y = global.roomTiles[global.mapSize - curCol - 1, global.mapSize - curRow - 1].y;
   
   global.setFlag = false;
} else if (global.PlayerWon == 2 &amp;&amp; global.setup &amp;&amp; global.setWall &gt; 0 &amp;&amp; (keyboard_check(key_enter)|| gamepad_button_check(0,gp_enter))){
    global.gridTwo[curCol, curRow].tileType = 5;
    global.roomTiles[global.mapSize - curCol - 1, global.mapSize - curRow - 1].tileType = 5;
    global.setWall -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display possible Character Movement
if(!global.setup){
if(keyboard_check(key_select)|| gamepad_button_check(0,gp_padselect)&amp;&amp;room==SplitScreen)
{
var i = 0;
    if(canSelect)
    {
for(i = 0; i&lt;global.teamSize;i++){
        curX = (global.teamTwo[i].x-global.startingXOne)/(global.spriteScaleSplit)/16;
        curY = (global.teamTwo[i].y-global.startingY)/(global.spriteScaleSplit)/16;
        
        //show_message("selecting: "+" "+string(self.curCol)+" "+ string(self.curRow));
        //show_message("character at: "+string(curX)+" " + string(curY));
        
        if(isHighlighted==false &amp;&amp; self.curCol == curX &amp;&amp; self.curRow == curY){
        //show_message("detecting character selection");
            ds_queue_clear(highlightedTiles); //clear stored tiles for highlighting
            selectedCharacter = i;
            global.teamTwo[i].isSelected = true; //variable to hold if this is the current character being moved
            //curX = self.curCol//selectedChar.xCord;
            //curY = self.curRow//selectedChar.yCord;
            totMove = global.teamTwo[i].movement;
            maxSize = global.mapSize;
            toLook = ds_queue_create();
            global.gridTwo[curX, curY].currentCost = 0;
            global.gridTwo[curX, curY].originTile = 0;
            global.gridTwo[curX, curY].originDirect = 0;
            ds_queue_enqueue(toLook, global.gridTwo[curX, curY]);
            
            while(!ds_queue_empty(toLook)){
                curTile = ds_queue_dequeue(toLook);
                curX = (curTile.x-global.startingXOne)/global.spriteScaleSplit/16;
                curY = (curTile.y-global.startingY)/global.spriteScaleSplit/16;
                //show_message(curX);
                //show_message(curY);
                if(curTile.color !=  2){
                    if(curTile.currentCost &lt;= totMove){
                        curTile.canMove = true;
                       if(curX + 1 &lt; maxSize &amp;&amp; global.gridTwo[curX + 1, curY].currentCost &gt; global.gridTwo[curX + 1, curY].cost + curTile.currentCost){ 
                            global.gridTwo[curX + 1, curY].currentCost = global.gridTwo[curX + 1, curY].cost + curTile.currentCost;
                            global.gridTwo[curX + 1, curY].originTile = curTile;
                            global.gridTwo[curX + 1, curY].originDirect = 1;
                            ds_queue_enqueue(toLook, global.gridTwo[curX + 1, curY]);
                        }if(curX - 1 &gt;= 0 &amp;&amp; global.gridTwo[curX - 1, curY].currentCost &gt; global.gridTwo[curX - 1, curY].cost + curTile.currentCost){
                            global.gridTwo[curX - 1, curY].currentCost = global.gridTwo[curX - 1, curY].cost + curTile.currentCost;
                            global.gridTwo[curX - 1, curY].originTile = curTile;
                            global.gridTwo[curX - 1, curY].originDirect = 2;
                            ds_queue_enqueue(toLook, global.gridTwo[curX - 1, curY]);
                        }if(curY + 1 &lt; maxSize &amp;&amp; global.gridTwo[curX, curY + 1].currentCost &gt; global.gridTwo[curX, curY + 1].cost + curTile.currentCost){
                            global.gridTwo[curX, curY + 1].currentCost = global.gridTwo[curX, curY + 1].cost + curTile.currentCost;
                            global.gridTwo[curX, curY + 1].originTile = curTile;
                            global.gridTwo[curX, curY + 1].originDirect = 3;
                            ds_queue_enqueue(toLook, global.gridTwo[curX, curY + 1]);
                        }if(curY - 1 &gt;= 0 &amp;&amp; global.gridTwo[curX, curY - 1].currentCost &gt; global.gridTwo[curX, curY - 1].cost + curTile.currentCost){
                            global.gridTwo[curX, curY - 1].currentCost = global.gridTwo[curX, curY - 1].cost + curTile.currentCost;
                            global.gridTwo[curX, curY - 1].originTile = curTile;
                            global.gridTwo[curX, curY - 1].originDirect = 4;
                            ds_queue_enqueue(toLook, global.gridTwo[curX, curY - 1]);
                            }
                        }
                        curTile.color = 2;
                        ds_queue_enqueue(highlightedTiles, curTile);
                    }
                }
    
                isHighlighted=true;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            if(isHighlighted==true &amp;&amp; global.teamTwo[i].isSelected==true)
            {
                global.teamTwo[i].isSelected=false;
                 while(!ds_queue_empty(highlightedTiles)){
                    curTile = ds_queue_dequeue(highlightedTiles);
                    curTile.originTile = 0;
                    curTile.originDirect = 0;
                    curTile.canMove = false;
                    curTile.color=0;
                    curTile.currentCost = 10;
                }
                /*
                var i;
                var j;
                for (i = 0; i &lt; maxSize; i += 1){
                    for(j=0; j&lt;maxSize; j+=1){
                        global.gridTwo[i,j].canMove=false;
                        global.gridTwo[i,j].color=0;
                        global.gridTwo[i,j].currentCost = 0;
                    }
                }
                */
                isHighlighted=false;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            
        } 

    }
}
} else if(keyboard_check(key_select)|| gamepad_button_check(0,gp_padselect)&amp;&amp;room==SplitScreen){
    //show_message("why does the world hate me");
    for(i = 0; i&lt;global.teamSize;i++){
        curX = (global.teamTwo[i].x-global.startingXOne)/(global.spriteScaleSplit)/16;
        curY = (global.teamTwo[i].y-global.startingY)/(global.spriteScaleSplit)/16;
        if (canSelect &amp;&amp; self.curCol == curX &amp;&amp; self.curRow == curY){
            selectedCharacter = i;
            global.teamTwo[i].isSelected = true;
            isHighlighted=true;
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
//Move highlighted tile to where current location of player
if(room == SplitScreen &amp;&amp; !PlayerTwo.inMenu){
    if(keyboard_check(key_down)|| gamepad_button_check(0,gp_down))
    {
        if(canMove){
        global.gridTwo[curCol,curRow].playerTwoSelected=false;
        if(curRow&lt;global.mapSize-1)
            curRow++;
        global.gridTwo[curCol,curRow].playerTwoSelected=true;
    
        canMove=false;
        }
        if(alarm[0]==-1)
        {
           alarm[0]= room_speed*(0.1);
        }
        
    }
    if(keyboard_check(key_right)|| gamepad_button_check(0,gp_right))
    {
        if(self.canMove){
        global.gridTwo[curCol,curRow].playerTwoSelected=false;
        if(curCol&lt;global.mapSize-1)    
            curCol++;
        global.gridTwo[curCol,curRow].playerTwoSelected=true;
    
        canMove=false;
    
        }
        if(alarm[0]==-1)
        {
           alarm[0]= room_speed*(0.1);
        }
    
    }
    if(keyboard_check(key_left)|| gamepad_button_check(0,gp_left))
    {
        if(self.canMove){
        global.gridTwo[curCol,curRow].playerTwoSelected=false;
        if (curCol&gt;0)
            curCol--;
        global.gridTwo[curCol,curRow].playerTwoSelected=true;
    
        canMove=false;
    
        }
        if(alarm[0]==-1)
        {
           alarm[0]= room_speed*(0.1);
        }
    }
    
    if(keyboard_check(key_up)|| gamepad_button_check(0,gp_up))
    {
    
        if(canMove){
        global.gridTwo[curCol,curRow].playerTwoSelected=false;
        if(curRow&gt;0)
            curRow--;
        global.gridTwo[curCol,curRow].playerTwoSelected=true;
    
        canMove=false;
        }
        if(alarm[0]==-1)
        {
           alarm[0]= room_speed*(0.1);
        }
    
    }
}


    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move cursor on drafting screen
if(GameMaster.draftTurn == 1){
    if(room==Drafting &amp;&amp; inMenu == false ){
    
        if(keyboard_check(key_down)&amp;&amp; draftCanMove)
        {
    
    
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=false;
            draftRow+=1;    //increment the row selected
            if(draftRow&gt;draftRowMax )
                draftRow=draftRowMax; 
                
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
            
        }
        
        if(keyboard_check(key_right)&amp;&amp; draftCanMove)
        {
    
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=false;
            draftCol+=1;
            
            if(draftCol&gt;draftColMax)
                draftCol=draftColMax;
                
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
        }
        
        if(keyboard_check(key_left)&amp;&amp; draftCanMove)
        {
    
                GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=false;    
            draftCol=draftCol-1;
            
            
            if(draftCol&lt;0)
                draftCol=0;    
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
            
        
        }
        
        if(keyboard_check(key_up)&amp;&amp; draftCanMove)
        {
        
    
        GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=false;
            draftRow=draftRow-1;;    //increment the row selected 
            
            if(draftRow&lt;0 )
                draftRow=0; 
                
            GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
        }
        
        if(keyboard_check(key_enter)&amp;&amp; draftCanMove)
        {
            //if tile hasn't been selected by either player, is a tile with a character associated, and drafting turns still left, allow for selection
            if(GameMaster.pool[draftRow, draftCol].playerTwoSelected==false &amp;&amp; GameMaster.pool[draftRow, draftCol].playerOneSelected==false &amp;&amp; GameMaster.pool[draftRow, draftCol].spriteToDraw!=sprite1 &amp;&amp; draftCount&lt;global.teamSize){
                GameMaster.pool[draftRow, draftCol].playerTwoSelected=true;
                 GameMaster.pool[draftRow, draftCol].playerTwoHighlighted=false;
                global.teamTwo[draftCount].sprite_index=GameMaster.pool[draftRow, draftCol].spriteToDraw;
                if(global.teamTwo[draftCount].alarm[0] == -1) {global.teamTwo[draftCount].alarm[0] = room_speed*(.05);}
                draftCount+=1;
                GameMaster.draftTurn = 0;
            }
            //else{
            //    GameMaster.pool[draftRow, draftCol].playerTwoSelected=false;
            //}
            
            
        }
        
       if(alarm[1]==-1)
       {
            
            alarm[1]= room_speed*(0.2);
       }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
