<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player One
key_up = vk_up; // up on board
key_down = vk_down; //for down on board
key_right = vk_right; //for right on board
key_left  = vk_left; //for left on board
key_select = vk_shift; //for select key
 key_enter = vk_enter; //for enter key 
 
 //set starting position
curRow = 14;
curCol = 6;
canMove=true;
canSelect=true;
isHighlighted=false;

//global.roomTiles[curCol,curRow].playerOneSelected=true;

//Setting the team
//global.teamOne[0].sprite_index = Wizard;
global.teamOne[0].originRow = global.mapSize-2;
global.teamOne[0].originCol = global.mapSize-6;
//global.teamOne[1].sprite_index = Wizard;
global.teamOne[1].originRow = global.mapSize-2;
global.teamOne[1].originCol = global.mapSize-7;
//global.teamOne[2].sprite_index = Wizard;
global.teamOne[2].originRow = global.mapSize-2;
global.teamOne[2].originCol = global.mapSize-8;
//global.teamOne[3].sprite_index = Wizard;
global.teamOne[3].originRow = global.mapSize-2;
global.teamOne[3].originCol = global.mapSize-9;
characterSelected = 0;


//queue of highlighted tiles
highlightedTiles = ds_queue_create();

//Setting up menu controls
inMenu = false;
currentIncrement = 0;

//setting drafting controls
draftCanMove=true;
draftRow = 0;
draftCol = 11;

draftColMax =11;
draftRowMax =1

//Set up drafting
draftCount=0;

//set up bonus screen shtuff
maxBonusButtons = 3;

//set bonus varibles
if(room==BonusScreen){lvPoints = 10;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set drafting move delay
draftCanMove= true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can move - delay
canMove = true;
canSelect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Character 
if(!global.setup){
if(keyboard_check(key_enter) &amp;&amp; room == SplitScreen){
    if(isHighlighted==true  &amp;&amp; global.roomTiles[curCol, curRow].canMove==true &amp;&amp; global.teamOne[selectedCharacter].isSelected ){    
        global.teamOne[selectedCharacter].destTile = global.roomTiles[curCol, curRow];
        var dx = global.roomTiles[curCol, curRow].originTile.x - global.roomTiles[curCol, curRow].x;
        var dy = global.roomTiles[curCol, curRow].originTile.y - global.roomTiles[curCol, curRow].y;
        if(dx != 0 || dy != 0){
            if(dx == 0){
                if(dy &lt; 0){ global.teamOne[selectedCharacter].destTile.originDirect = 3;}
                else { global.teamOne[selectedCharacter].destTile.originDirect = 4;}
            } else {
                if(dx &lt; 0) {global.teamOne[selectedCharacter].destTile.originDirect = 1;}
                else {global.teamOne[selectedCharacter].destTile.originDirect = 2;}
            }
        }
        GameMaster.toMove = global.teamOne[selectedCharacter];
        if(GameMaster.alarm[2] == -1){ GameMaster.alarm[2] = room_speed*(.05); }
        
        var i;
        var j;
        for (i = 0; i &lt; maxSize; i += 1){
            for(j=0; j&lt;maxSize; j+=1){
                global.roomTiles[i,j].canMove=false;
                global.roomTiles[i,j].color=0;
                global.roomTiles[i,j].currentCost = 10;
                //global.roomTiles[i,j].originTile = 0;
            }
        }
        isHighlighted=false;
        global.teamOne[selectedCharacter].isSelected = false;
    }
} 
}else if(isHighlighted==true  &amp;&amp; room == SplitScreen &amp;&amp; keyboard_check(key_enter)){
    if(global.roomTiles[curCol, curRow].canMove==true &amp;&amp; global.teamOne[selectedCharacter].isSelected){
        global.teamOne[selectedCharacter].x = global.roomTiles[curCol, curRow].x;
        global.teamOne[selectedCharacter].y = global.roomTiles[curCol, curRow].y;
        global.teamOne[selectedCharacter].originRow = curRow;
        global.teamOne[selectedCharacter].originCol = curCol;
        
        //move coppies
        GameMaster.copyTeamOne[selectedCharacter].x = global.gridTwo[global.mapSize - curCol - 1, global.mapSize - curRow - 1].x;
        GameMaster.copyTeamOne[selectedCharacter].y = global.gridTwo[global.mapSize - curCol - 1, global.mapSize - curRow - 1].y;
    }  
}else if(room == SplitScreen &amp;&amp; global.PlayerWon == 1 &amp;&amp; global.setup &amp;&amp; global.setFlag){
   PlayerOneObjective.x = global.roomTiles[curCol, curRow].x;
   PlayerOneObjective.y = global.roomTiles[curCol, curRow].y;
   PlayerOneObjective.originRow = curRow;
   PlayerOneObjective.originCol = curCol;
   
   GameMaster.PlayerOneObjectiveCopy.x = global.gridTwo[global.mapSize - curCol - 1, global.mapSize - curRow - 1].x;
   GameMaster.PlayerOneObjectiveCopy.y = global.gridTwo[global.mapSize - curCol - 1, global.mapSize - curRow - 1].y;
   
   global.setFlag = false;
}else if (room == SplitScreen &amp;&amp; global.PlayerWon == 1 &amp;&amp; global.setup &amp;&amp; global.setWall &gt; 0){
    global.roomTiles[curCol, curRow].tileType = 5;
    global.gridTwo[global.mapSize - curCol - 1, global.mapSize - curRow - 1].tileType = 5;
    global.setWall -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display possible Character Movement
if(!global.setup){
if(keyboard_check(key_select)&amp;&amp;room==SplitScreen)
{
var i = 0;
    if(canSelect)
    {
for(i = 0; i&lt;global.teamSize;i++){
        curX = (global.teamOne[i].x-global.startingXTwo)/(global.spriteScaleSplit)/16;
        curY = (global.teamOne[i].y-global.startingY)/(global.spriteScaleSplit)/16;
        
        //show_message("selecting: "+" "+string(self.curCol)+" "+ string(self.curRow));
        //show_message("character at: "+string(curX)+" " + string(curY));
        
        if(isHighlighted==false &amp;&amp; self.curCol == curX &amp;&amp; self.curRow == curY){
        //show_message("detecting character selection");
            ds_queue_clear(highlightedTiles); //clear stored tiles for highlighting
            selectedCharacter = i;
            global.teamOne[i].isSelected = true; //variable to hold if this is the current character being moved
            //curX = self.curCol//selectedChar.xCord;
            //curY = self.curRow//selectedChar.yCord;
            totMove = global.teamOne[i].movement;
            maxSize = global.mapSize;
            toLook = ds_queue_create();
            global.roomTiles[curX, curY].currentCost = 0;
            global.roomTiles[curX, curY].originTile = 0;
            global.roomTiles[curX, curY].originDirect = 0;
            ds_queue_enqueue(toLook, global.roomTiles[curX, curY]);
            
            while(!ds_queue_empty(toLook)){
                curTile = ds_queue_dequeue(toLook);
                curX = (curTile.x-global.startingXTwo)/global.spriteScaleSplit/16;
                curY = (curTile.y-global.startingY)/global.spriteScaleSplit/16;
                //show_message(curX);
                //show_message(curY);
                if(curTile.color !=  2){
                    if(curTile.currentCost &lt;= totMove){
                        curTile.canMove = true;
                       if(curX + 1 &lt; maxSize &amp;&amp; global.roomTiles[curX + 1, curY].currentCost &gt; global.roomTiles[curX + 1, curY].cost + curTile.currentCost){ 
                            global.roomTiles[curX + 1, curY].currentCost = global.roomTiles[curX + 1, curY].cost + curTile.currentCost;
                            global.roomTiles[curX + 1, curY].originTile = curTile;
                            global.roomTiles[curX + 1, curY].originDirect = 1;
                            ds_queue_enqueue(toLook, global.roomTiles[curX + 1, curY]);
                        }if(curX - 1 &gt;= 0 &amp;&amp; global.roomTiles[curX - 1, curY].currentCost &gt; global.roomTiles[curX - 1, curY].cost + curTile.currentCost){
                            global.roomTiles[curX - 1, curY].currentCost = global.roomTiles[curX - 1, curY].cost + curTile.currentCost;
                            global.roomTiles[curX - 1, curY].originTile = curTile;
                            global.roomTiles[curX - 1, curY].originDirect = 2;
                            ds_queue_enqueue(toLook, global.roomTiles[curX - 1, curY]);
                        }if(curY + 1 &lt; maxSize &amp;&amp; global.roomTiles[curX, curY + 1].currentCost &gt; global.roomTiles[curX, curY + 1].cost + curTile.currentCost){
                            global.roomTiles[curX, curY + 1].currentCost = global.roomTiles[curX, curY + 1].cost + curTile.currentCost;
                            global.roomTiles[curX, curY + 1].originTile = curTile;
                            global.roomTiles[curX, curY + 1].originDirect = 3;
                            ds_queue_enqueue(toLook, global.roomTiles[curX, curY + 1]);
                        }if(curY - 1 &gt;= 0 &amp;&amp; global.roomTiles[curX, curY - 1].currentCost &gt; global.roomTiles[curX, curY - 1].cost + curTile.currentCost){
                            global.roomTiles[curX, curY - 1].currentCost = global.roomTiles[curX, curY - 1].cost + curTile.currentCost;
                            global.roomTiles[curX, curY - 1].originTile = curTile;
                            global.roomTiles[curX, curY - 1].originDirect = 4;
                            ds_queue_enqueue(toLook, global.roomTiles[curX, curY - 1]);
                            }
                        }
                        curTile.color = 2;
                        ds_queue_enqueue(highlightedTiles, curTile);
                    }
                }
    
                isHighlighted=true;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            if(isHighlighted==true &amp;&amp; global.teamOne[i].isSelected==true)
            {
                global.teamOne[i].isSelected=false;
                 while(!ds_queue_empty(highlightedTiles)){
                    curTile = ds_queue_dequeue(highlightedTiles);
                    curTile.originTile = 0;
                    curTile.originDirect = 0;
                    curTile.canMove = false;
                    curTile.color=0;
                    curTile.currentCost = 10;
                }
                /*
                var i;
                var j;
                for (i = 0; i &lt; maxSize; i += 1){
                    for(j=0; j&lt;maxSize; j+=1){
                        global.roomTiles[i,j].canMove=false;
                        global.roomTiles[i,j].color=0;
                        global.roomTiles[i,j].currentCost = 0;
                    }
                }
                */
                isHighlighted=false;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            
        } 

    }
}
} else if(keyboard_check(key_select)&amp;&amp;room==SplitScreen){
    for(i = 0; i&lt;global.teamSize;i++){
        curX = (global.teamOne[i].x-global.startingXTwo)/(global.spriteScaleSplit)/16;
        curY = (global.teamOne[i].y-global.startingY)/(global.spriteScaleSplit)/16;
        if (canSelect &amp;&amp; self.curCol == curX &amp;&amp; self.curRow == curY){
            selectedCharacter = i;
            global.teamOne[i].isSelected = true;
            isHighlighted=true;
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
//Move highlighted tile to where current location of player
if(room==SplitScreen &amp;&amp; !PlayerOne.inMenu){
    if(keyboard_check(key_down))
    {
        if(canMove){
            global.roomTiles[curCol,curRow].playerOneSelected=false;
            if(curRow&lt;global.mapSize-1)
                curRow++;
                
            global.roomTiles[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    }
    
    if(keyboard_check(key_right))
    {
        if(canMove){
            global.roomTiles[curCol,curRow].playerOneSelected=false;
            if(curCol&lt;global.mapSize-1)    
                curCol++;
            global.roomTiles[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    
    }
    if(keyboard_check(key_left))
    {
        if(canMove){
            global.roomTiles[curCol,curRow].playerOneSelected=false;
            if (curCol&gt;0)
                curCol--;
            global.roomTiles[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    }
    
    if(keyboard_check(key_up))
    {
    
        if(canMove){
            global.roomTiles[curCol,curRow].playerOneSelected=false;
            if(curRow&gt;0)
                curRow--;
            global.roomTiles[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    
    }
}


    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move cursor on drafting screen 
if(room==Drafting){
if(GameMaster.draftTurn == 0){
    if( inMenu==false ){
    
        if(keyboard_check(key_down)&amp;&amp; draftCanMove)
        {
    
    
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=false;
            draftRow+=1;    //increment the row selected
            if(draftRow&gt;draftRowMax )
                draftRow=draftRowMax; 
                
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
            
        }
        
        if(keyboard_check(key_right)&amp;&amp; draftCanMove)
        {
    
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=false;
            draftCol+=1;
            
            if(draftCol&gt;draftColMax)
                draftCol=draftColMax;
                
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
        }
        
        if(keyboard_check(key_left)&amp;&amp; draftCanMove)
        {
    
                GameMaster.pool[draftRow, draftCol].playerOneHighlighted=false;    
            draftCol=draftCol-1;
            
            
            if(draftCol&lt;0)
                draftCol=0;    
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
            
        
        }
        
        if(keyboard_check(key_up)&amp;&amp; draftCanMove)
        {
        
    
        GameMaster.pool[draftRow, draftCol].playerOneHighlighted=false;
            draftRow=draftRow-1;;    //increment the row selected 
            
            if(draftRow&lt;0 )
                draftRow=0; 
                
            GameMaster.pool[draftRow, draftCol].playerOneHighlighted=true;
            GameMaster.selectedCharInfo.sprite_index = GameMaster.pool[draftRow, draftCol].spriteToDraw;
            draftCanMove=false
        }
        
        if(keyboard_check(key_enter)&amp;&amp; draftCanMove )
        {
            //if tile hasn't been selected by either player, is a tile with a character associated, and drafting turns still left, allow for selection
            if(GameMaster.pool[draftRow, draftCol].playerOneSelected==false &amp;&amp; GameMaster.pool[draftRow, draftCol].playerTwoSelected==false &amp;&amp; GameMaster.pool[draftRow, draftCol].spriteToDraw!=sprite1 &amp;&amp; draftCount&lt;global.teamSize){
                //show_message("Selected "+ string(draftRow) +" "+string(draftCol))
                GameMaster.pool[draftRow, draftCol].playerOneSelected=true;
                GameMaster.pool[draftRow, draftCol].playerOneHighlighted=false;
                global.teamOne[draftCount].sprite_index=GameMaster.pool[draftRow, draftCol].spriteToDraw;
                if(global.teamOne[draftCount].alarm[0] == -1) {global.teamOne[draftCount].alarm[0] = room_speed*(.05);}
                draftCount+=1;
                GameMaster.draftTurn = 1;
            }
            //else{
            //    GameMaster.pool[draftRow, draftCol].playerOneSelected=false;
            //}
            
            
        }
        
       if(alarm[1]==-1)
       {
            alarm[1]= room_speed*(0.2);
       }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
