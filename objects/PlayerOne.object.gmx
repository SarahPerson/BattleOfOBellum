<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player One
key_up = vk_up; // up on board
key_down = vk_down; //for down on board
key_right = vk_right; //for right on board
key_left  = vk_left; //for left on board
key_select = vk_shift; //for select key
 key_enter = vk_enter; //for enter key 
 
 //set starting position
curRow = 0;
curCol = 0;
canMove=true;
canSelect=true;
isHighlighted=false;

CurrentLevel.roomTiles[curRow,curCol].sprite_index=HLTile;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can move - delay
canMove = true;
canSelect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
//Move highlighted tile to where current location of player

if(keyboard_check(key_down))
{
    if(canMove){
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=tileDefault;
    if(curRow&lt;14)
        curRow++;
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=HLTile;

    canMove=false;
    }
}

if(keyboard_check(key_right))
{
    if(canMove){
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=tileDefault;
    if(curCol&lt;14)    
        curCol++;
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=HLTile;

    canMove=false;

    }

}
if(keyboard_check(key_left))
{
    if(canMove){
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=tileDefault;
    if (curCol&gt;0)
        curCol--;
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=HLTile;

    canMove=false;

    }
}

if(keyboard_check(key_up))
{

    if(canMove){
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=tileDefault;
    if(curRow&gt;0)
        curRow--;
    CurrentLevel.roomTiles[curCol,curRow].sprite_index=HLTile;

    canMove=false;
    }

}

if(alarm[0]==-1)
{
   alarm[0]= room_speed*(0.25);
}
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display possible Character Movement
if(keyboard_check(key_select))
{
    if(canSelect)
    {
    if(isHighlighted==false &amp;&amp; self.curCol == characterOne.x/16 &amp;&amp; self.curRow == characterOne.y/16){
        show_message("Entered highlight selection");
        curX = self.curCol//selectedChar.xCord;
        curY = self.curRow//selectedChar.yCord;
        totMove = 4//selectedChar.movement;
        maxSize = room_width/16;
        toLook = ds_queue_create();
        ds_queue_enqueue(toLook, CurrentLevel.roomTiles[curX, curY]);
        
        while(!ds_queue_empty(toLook)){
            curTile = ds_queue_dequeue(toLook)
            curX = curTile.x/16;
            curY = curTile.y/16;
        
            if(curTile.color !=  2){
                if(curTile.currentCost &lt;= totMove){
                    curTile.canMove = true;
                    if(curX + 1 &lt; maxSize){ 
                        CurrentLevel.roomTiles[curX + 1, curY].currentCost = CurrentLevel.roomTiles[curX + 1, curY].cost + curTile.currentCost;
                        ds_queue_enqueue(toLook, CurrentLevel.roomTiles[curX + 1, curY]);
                    }if(curX - 1 &gt;= 0){
                        CurrentLevel.roomTiles[curX - 1, curY].currentCost = CurrentLevel.roomTiles[curX - 1, curY].cost + curTile.currentCost;
                        ds_queue_enqueue(toLook, CurrentLevel.roomTiles[curX - 1, curY]);
                    }if(curY + 1 &lt; maxSize){
                        CurrentLevel.roomTiles[curX, curY + 1].currentCost = CurrentLevel.roomTiles[curX, curY + 1].cost + curTile.currentCost;
                        ds_queue_enqueue(toLook, CurrentLevel.roomTiles[curX, curY + 1]);
                    }if(curY - 1 &gt;= 0){
                        CurrentLevel.roomTiles[curX, curY - 1].currentCost = CurrentLevel.roomTiles[curX, curY - 1].cost + curTile.currentCost;
                        ds_queue_enqueue(toLook, CurrentLevel.roomTiles[curX, curY - 1]);
                        }
                    }
                    curTile.color = 2;
                }
            }

            isHighlighted=true;
        }
        else if(isHighlighted==true)
        {
            show_message("Dehighlight selected");
            var i;
            var j;
            for (i = 0; i &lt; maxSize; i += 1){
                for(j=0; j&lt;maxSize; j+=1){
                    CurrentLevel.roomTiles[i,j].canMove=false;
                    CurrentLevel.roomTiles[i,j].color=0;
                    CurrentLevel.roomTiles[i,j].currentCost = 0;
                }
            }
            isHighlighted=false;
        }
        
        
        canSelect=false;
        
        
        if(alarm[0]==-1)
        {
            alarm[0]= room_speed*(0.25);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Character 
if(keyboard_check(key_enter)){
    if(isHighlighted==true ){
    //it doesn't seem the tiles canMove property is being set 
    //This code in the if caused this to never happen &amp;&amp; CurrentLevel.roomTiles[curRow, curCol].canMove==true
        characterOne.x =curCol*16;
        characterOne.y = curRow*16;

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
