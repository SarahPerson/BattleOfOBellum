<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player One
key_up = vk_up; // up on board
key_down = vk_down; //for down on board
key_right = vk_right; //for right on board
key_left  = vk_left; //for left on board
key_select = vk_shift; //for select key
 key_enter = vk_enter; //for enter key 
 
 //set starting position
curRow = 29;
curCol = 15;
canMove=true;
canSelect=true;
isHighlighted=false;

//global.roomTiles[curCol,curRow].playerOneSelected=true;

//Setting the team
//global.teamOne[0].sprite_index = Soldier;
characterSelected = 0;

//queue of highlighted tiles
highlightedTiles = ds_queue_create();

//Setting up menu controls
inMenu = true;
currentIncrement = 0;

//setting drafting controls
draftCanMove=true;
draftRow = 0;
draftCol = 11;

draftColMax =11;
draftRowMax =1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set drafting move delay
draftCanMove= true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set can move - delay
canMove = true;
canSelect = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Character 
if(keyboard_check(key_enter)){

    if(isHighlighted==true  &amp;&amp; global.gridTwo[curCol, curRow].canMove==true &amp;&amp; global.teamOne[selectedCharacter].isSelected ){    
        global.teamOne[selectedCharacter].destTile = global.gridTwo[curCol, curRow];
        var dx = global.gridTwo[curCol, curRow].originTile.x - global.gridTwo[curCol, curRow].x;
        var dy = global.gridTwo[curCol, curRow].originTile.y - global.gridTwo[curCol, curRow].y;
        if(dx != 0 || dy != 0){
            if(dx == 0){
                if(dy &lt; 0){ global.teamOne[selectedCharacter].destTile.originDerect = 3;}
                else { global.teamOne[selectedCharacter].destTile.originDerect = 4;}
            } else {
                if(dx &lt; 0) {global.teamOne[selectedCharacter].destTile.originDerect = 1;}
                else {global.teamOne[selectedCharacter].destTile.originDerect = 2;}
            }
        }
        
        var i;
        var j;
        for (i = 0; i &lt; maxSize; i += 1){
            for(j=0; j&lt;maxSize; j+=1){
                global.gridTwo[i,j].canMove=false;
                global.gridTwo[i,j].color=0;
                global.gridTwo[i,j].currentCost = 10;
                //global.roomTiles[i,j].originTile = 0;
            }
        }
        isHighlighted=false;
        global.teamOne[selectedCharacter].isSelected = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display possible Character Movement
if(keyboard_check(key_select))
{
var i = 0;
    if(canSelect)
    {
for(i = 0; i&lt;global.teamSize;i++){
        if(isHighlighted==false &amp;&amp; self.curCol == (global.teamOne[i].x-global.startingXTwo)/global.spriteScaleSplit/16 &amp;&amp; self.curRow == (global.teamOne[i].y-global.startingY)/global.spriteScaleSplit/16){
            ds_queue_clear(highlightedTiles); //clear stored tiles for highlighting
            selectedCharacter = i;
            global.teamOne[i].isSelected = true; //variable to hold if this is the current character being moved
            curX = self.curCol//selectedChar.xCord;
            curY = self.curRow//selectedChar.yCord;
            totMove = 4//selectedChar.movement;
            maxSize = 30;
            toLook = ds_queue_create();
            global.gridTwo[curX, curY].currentCost = 0;
            global.gridTwo[curX, curY].originTile = 0;
            global.gridTwo[curX, curY].originDirect = 0;
            ds_queue_enqueue(toLook, global.gridTwo[curX, curY]);
            
            while(!ds_queue_empty(toLook)){
                curTile = ds_queue_dequeue(toLook)
                curX = (curTile.x-global.startingXTwo)/global.spriteScaleSplit/16;
                curY = (curTile.y-global.startingY)/global.spriteScaleSplit/16;
                if(curTile.color !=  2){
                    if(curTile.currentCost &lt;= totMove){
                        curTile.canMove = true;
                        if(curX + 1 &lt; maxSize &amp;&amp; global.gridTwo[curX + 1, curY].currentCost &gt; global.gridTwo[curX + 1, curY].cost + curTile.currentCost){ 
                            global.gridTwo[curX + 1, curY].currentCost = global.gridTwo[curX + 1, curY].cost + curTile.currentCost;
                            global.gridTwo[curX + 1, curY].originTile = curTile;
                            global.gridTwo[curX + 1, curY].originDirect = 1;
                            ds_queue_enqueue(toLook, global.gridTwo[curX + 1, curY]);
                        }if(curX - 1 &gt;= 0 &amp;&amp; global.gridTwo[curX - 1, curY].currentCost &gt; global.gridTwo[curX - 1, curY].cost + curTile.currentCost){
                            global.gridTwo[curX - 1, curY].currentCost = global.gridTwo[curX - 1, curY].cost + curTile.currentCost;
                            global.gridTwo[curX - 1, curY].originTile = curTile;
                            global.gridTwo[curX - 1, curY].originDirect = 2;
                            ds_queue_enqueue(toLook, global.gridTwo[curX - 1, curY]);
                        }if(curY + 1 &lt; maxSize &amp;&amp; global.gridTwo[curX, curY + 1].currentCost &gt; global.gridTwo[curX, curY + 1].cost + curTile.currentCost){
                            global.gridTwo[curX, curY + 1].currentCost = global.gridTwo[curX, curY + 1].cost + curTile.currentCost;
                            global.gridTwo[curX, curY + 1].originTile = curTile;
                            global.gridTwo[curX, curY + 1].originDirect = 3;
                            ds_queue_enqueue(toLook, global.gridTwo[curX, curY + 1]);
                        }if(curY - 1 &gt;= 0 &amp;&amp; global.gridTwo[curX, curY - 1].currentCost &gt; global.gridTwo[curX, curY - 1].cost + curTile.currentCost){
                            global.gridTwo[curX, curY - 1].currentCost = global.gridTwo[curX, curY - 1].cost + curTile.currentCost;
                            global.gridTwo[curX, curY - 1].originTile = curTile;
                            global.gridTwo[curX, curY - 1].originDirect = 4;
                            ds_queue_enqueue(toLook, global.gridTwo[curX, curY - 1]);
                            }
                        }
                        curTile.color = 2;
                        ds_queue_enqueue(highlightedTiles, curTile);
                    }
                }
    
                isHighlighted=true;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            if(isHighlighted==true &amp;&amp; global.teamOne[i].isSelected==true)
            {
                global.teamOne[i].isSelected=false;

                while(!ds_queue_empty(highlightedTiles)){
                    
                    curTile = ds_queue_dequeue(highlightedTiles);
                    curTile.originTile = 0;
                    curTile.originDirect = 0;
                    curTile.canMove = false;
                    curTile.color=0;
                    curTile.currentCost = 10;
                }
                /*
                var i;
                var j;
                for (i = 0; i &lt; maxSize; i += 1){
                    for(j=0; j&lt;maxSize; j+=1){
                        global.gridTwo[i,j].canMove=false;
                        global.gridTwo[i,j].color=0;
                        global.gridTwo[i,j].currentCost = 0;
                    }
                }
                */
                isHighlighted=false;
                canSelect=false;
            
                if(alarm[0]==-1)
                {
                    alarm[0]= room_speed*(0.25);
                }
                exit;
            }
            
        } 

    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Cursor
//Move highlighted tile to where current location of player
if(room==SplitScreen){
    if(keyboard_check(key_down))
    {
        if(canMove){
            global.gridTwo[curCol,curRow].playerOneSelected=false;
            if(curRow&lt;global.roomSize-1)
                curRow++;
                
            global.gridTwo[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    }
    
    if(keyboard_check(key_right))
    {
        if(canMove){
            global.gridTwo[curCol,curRow].playerOneSelected=false;
            if(curCol&lt;global.roomSize-1)    
                curCol++;
            global.gridTwo[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    
    }
    if(keyboard_check(key_left))
    {
        if(canMove){
            global.gridTwo[curCol,curRow].playerOneSelected=false;
            if (curCol&gt;0)
                curCol--;
            global.gridTwo[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    }
    
    if(keyboard_check(key_up))
    {
    
        if(canMove){
            global.gridTwo[curCol,curRow].playerOneSelected=false;
            if(curRow&gt;0)
                curRow--;
            global.gridTwo[curCol,curRow].playerOneSelected=true;
        
            canMove=false;
        }    
            if(alarm[0]==-1)
            {
               alarm[0]= room_speed*(0.1);
            }
        
    
    }
}


    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move cursor on drafting screen 
if(room==Drafting ){

    if(keyboard_check(key_down)&amp;&amp; draftCanMove)
    {


        GameMaster.pool[draftRow, draftCol].playerOneSelected=false;
        draftRow+=1;    //increment the row selected
        if(draftRow&gt;draftRowMax )
            draftRow=draftRowMax; 
            
        GameMaster.pool[draftRow, draftCol].playerOneSelected=true;
        
        
        
    }
    
    if(keyboard_check(key_right)&amp;&amp; draftCanMove)
    {

        GameMaster.pool[draftRow, draftCol].playerOneSelected=false;
        draftCol+=1;
        
        if(draftCol&gt;draftColMax)
            draftCol=draftColMax;
            
        GameMaster.pool[draftRow, draftCol].playerOneSelected=true;
        
        
    }
    
    if(keyboard_check(key_left)&amp;&amp; draftCanMove)
    {

            GameMaster.pool[draftRow, draftCol].playerOneSelected=false;    
        draftCol=draftCol-1;
        
        
        if(draftCol&lt;0)
            draftCol=0;    
        GameMaster.pool[draftRow, draftCol].playerOneSelected=true;
    
        
        
    
    }
    
    if(keyboard_check(key_up)&amp;&amp; draftCanMove)
    {
    

    GameMaster.pool[draftRow, draftCol].playerOneSelected=false;
        draftRow=draftRow-1;;    //increment the row selected 
        
        if(draftRow&lt;0 )
            draftRow=0; 
            
        GameMaster.pool[draftRow, draftCol].playerOneSelected=true;
        
        
    }
    
   if(alarm[1]==-1)
   {
        draftCanMove=false
        alarm[1]= room_speed*(0.2);
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
