<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup the players
instance_create(0,0,PlayerOne);
instance_create(0,0,PlayerTwo);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the objectives
instance_create(0,0,PlayerOneObjective);
instance_create(0,0,PlayerTwoObject);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up map
tick = 0;
moveAlg = false;
canRun = true;
mapNum = 1;
myFile = file_text_open_read("smallCity.txt");
startingX = 100;
startingY = 100;
switch(mapNum){
    case 1:
        var i, j, z;
        for (i = 0; i &lt; 30; i += 1)
           {
           for (j = 0; j &lt; 30; j += 1)
              {
                tempTile = instance_create(j*16, i*16, Tile);
                global.roomTiles[tempTile.x/16,tempTile.y/16] = tempTile;
                var temp = file_text_read_real(myFile);
                global.roomTiles[j,i].tileType = temp;
                
                for(z=0; z&lt;global.teamSize; z+=1)
                {
                    if(global.teamOne[z].row==i &amp;&amp; global.teamOne[z].col==j)
                    {
                        global.teamOne[z].x=j*16;
                        global.teamOne[z].y = i*16;
                    }
                     if(global.teamTwo[z].row==i &amp;&amp; global.teamTwo[z].col==j)
                    {
                        global.teamTwo[z].x = j*16;
                        global.teamTwo[z].y = i*16;
                    }
                }
                
                //Set the objectives
                //check if objective one goes on this tile
                if(PlayerOneObjective.row==i &amp;&amp; PlayerOneObjective.col==j)
                {
                    PlayerOneObjective.x = j*16;
                    PlayerOneObjective.y = i*16;    
                }
                //check if objective two goes on this tile
                if(PlayerTwoObject.row==i &amp;&amp; PlayerTwoObject.col==j)
                {
                    PlayerTwoObject.x = j*16;
                    PlayerTwoObject.y = i*16;    
                }
              }
           }
        break;

}
file_text_close(myFile);

global.roomTiles[PlayerOne.curCol,PlayerOne.curRow].playerOneSelected=true;
global.roomTiles[PlayerTwo.curCol,PlayerTwo.curRow].playerTwoSelected=true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable for room
//size = ds_grid_width(global.roomTiles);
switch(mapNum){
    case 1:
        global.roomSize = 30;
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set move alg to true

moveStack = ds_stack_create();
curSpot = 0;
nextSlot = 0;
tick = 0;

for(var p = 0; p &lt; global.teamSize; p++){
    if(global.teamOne[p].destTile != 0){
        tempTile = global.teamOne[p].destTile;
        while(tempTile != 0){
            ds_stack_push(moveStack, tempTile);
            tempTile = tempTile.originTile;
            //show_message(tempTile);
        }
    
        switch(global.teamOne[p].movement){
            case 1:
                nextSlot = array(1);
                nextSlot[0] = 8;
            break;
            case 2:
                nextSlot = array(2);   
                nextSlot[0] = 3;
                nextSlot[1] = 7;
            break;
            case 3:
                nextSlot = array(3);
                nextSlot[0] = 2;
                nextSlot[1] = 5;
                nextSlot[2] = 8;
            break;
            case 4:
                nextSlot = array(4);
                nextSlot[0] = 1;
                nextSlot[1] = 3;
                nextSlot[2] = 5;
                nextSlot[3] = 7;
            break;
            case 5:
                nextSlot = array(5);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 4;
                nextSlot[3] = 6;
                nextSlot[4] = 8;
            break;
            case 6:
                nextSlot = array(6);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 3;
                nextSlot[3] = 5;
                nextSlot[4] = 6;
                nextSlot[5] = 8;
            break;
            case 7:
                nextSlot = array(7);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 3;
                nextSlot[3] = 4;
                nextSlot[4] = 6;
                nextSlot[5] = 7;
                nextSlot[6] = 8;
            break;
            case 8:
                nextSlot = array(8);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
            break;
            case 9:
                nextSlot = array(9);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
                nextSlot[8] = 8;
            break;
        }
        ds_stack_pop(moveStack);
        global.teamOne[p].moveArray = array(9);
        while(!ds_stack_empty(moveStack)){
            tempTile = ds_stack_pop(moveStack);
            while(tempTile.cost != 1){
                tempTile.cost -= 1;
                curSpot += 1;
            }
            
            global.teamOne[p].moveArray[nextSlot[curSpot]] = tempTile;
            curSpot += 1;
            //show_message("MoveArray: " + string(tempTile));
        }
        curSpot = 0;
      }  
    if(global.teamTwo[p].destTile != 0){
        tempTile = global.teamTwo[p].destTile;
        while(tempTile != 0){
            ds_stack_push(moveStack, tempTile);
            tempTile = tempTile.originTile;
        }
        
        switch(global.teamTwo[p].movement){
            case 1:
                nextSlot = array(1);
                nextSlot[0] = 8;
            break;
            case 2:
                nextSlot = array(2);   
                nextSlot[0] = 3;
                nextSlot[1] = 7;
            break;
            case 3:
                nextSlot = array(3);
                nextSlot[0] = 2;
                nextSlot[1] = 5;
                nextSlot[2] = 8;
            break;
            case 4:
                nextSlot = array(4);
                nextSlot[0] = 1;
                nextSlot[1] = 3;
                nextSlot[2] = 5;
                nextSlot[3] = 7;
            break;
            case 5:
                nextSlot = array(5);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 4;
                nextSlot[3] = 6;
                nextSlot[4] = 8;
            break;
            case 6:
                nextSlot = array(6);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 3;
                nextSlot[3] = 5;
                nextSlot[4] = 6;
                nextSlot[5] = 8;
            break;
            case 7:
                nextSlot = array(7);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 3;
                nextSlot[3] = 4;
                nextSlot[4] = 6;
                nextSlot[5] = 7;
                nextSlot[6] = 8;
            break;
            case 8:
                nextSlot = array(8);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
            break;
            case 9:
                nextSlot = array(9);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
                nextSlot[8] = 8;
            break;
        }
        ds_stack_pop(moveStack);
        global.teamTwo[p].moveArray = array(9);
        while(!ds_stack_empty(moveStack)){
            tempTile = ds_stack_pop(moveStack);
            while(tempTile.cost != 1){
                tempTile.cost -= 1;
                curSpot += 1;
            }
            
            global.teamTwo[p].moveArray[nextSlot[curSpot]] = tempTile;
            curSpot += 1;
            //show_message("MoveArray: " + string(tempTile));
        }
        curSpot = 0;
    }
}
moveAlg = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//combat alg
charOne = 0;
charTwo = 0;

switch(charOne.attack){
    case 1:
    var P = random_range(1,5);
    charOne.attackArray[0] = P/3;
    charOne.attackArray[1] = P/3;
    charOne.attackArray[2] = P/3;
    break;
    case 2:
    var p = random_range(1,5);
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = p/2;
    charOne.attackArray[2] = p/2;
    break;
    case 3:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}
switch(charTwo.attack){
    case 1:
    var p = random_range(1,5);
    charTwo.attackArray[0] = p/3;
    charTwo.attackArray[1] = p/3;
    charTwo.attackArray[2] = p/3;
    break;
    case 2:
    var p = random_range(1,5);
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = p/2;
    charTwo.attackArray[2] = p/2;
    break;
    case 3:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}

for(var g = 0; g &lt; 3; g++){
    if(random_range(0,45) &gt; charOne.movement){ charOne.hp -= charTwo.attackArray[g];}
    if(random_range(0,45) &gt; charTwo.movement){ charTwo.hp -= charOne.attackArray[g];}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sets can run
if(tick &lt; 9){ moveAlg = true; } else {tick = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simul movement algorithm

//time step
    if(moveAlg){
        for(var b = 0; b &lt; global.teamSize; b++){ //going through all character at each time step
            if(global.teamOne[b].moveArray[tick] != 0){
               global.teamOne[b].x =  global.teamOne[b].moveArray[tick].x;
               global.teamOne[b].y =  global.teamOne[b].moveArray[tick].y;
            } 
            if(global.teamTwo[b].moveArray[tick] != 0){
               global.teamTwo[b].x =  global.teamTwo[b].moveArray[tick].x;
               global.teamTwo[b].y =  global.teamTwo[b].moveArray[tick].y;
        
                }
            //show_message(string(global.teamOne[b].moveArray[tick].x)+ " "+ string(global.teamOne[b].moveArray[tick].x));
        }
        //Check Colisions/Do Combat
        moveAlg = false;
        tick += 1;
        alarm[0] = room_speed*.25;

    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
