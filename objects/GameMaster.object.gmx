<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up map
canRun = true;
mapNum = 1;
myFile = file_text_open_read("smallCity.txt");
switch(mapNum){
    case 1:
        var i, j;
        for (i = 0; i &lt; 30; i += 1)
           {
           for (j = 0; j &lt; 30; j += 1)
              {
                tempTile = instance_create(j*16, i*16, Tile);
                global.roomTiles[tempTile.x/16,tempTile.y/16] = tempTile;
                var temp = file_text_read_real(myFile);
                global.roomTiles[j,i].tileType = temp;
              }
           }
        break;

}
file_text_close(myFile);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable for room
//size = ds_grid_width(global.roomTiles);
switch(mapNum){
    case 1:
        global.roomSize = 30;
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simul movement algorithm
moveStack = ds_stack_create();
curSpot = 0;
nextSlot = 0;
tick = 0;

for(var p = 0; p &lt; global.teamSize; p++){
    if(global.teamOne[p].destTile != 0){
        tempTile = global.teamOne[p].destTile;
        while(tempTile != 0){
            ds_stack_push(moveStack, tempTile);
            tempTile = tempTile.originTile;
        }
    
        switch(global.teamOne[p].movement){
            case 1:
                nextSlot = array(1);
                nextSlot[0] = 8;
            break;
            case 2:
                nextSlot = array(2);   
                nextSlot[0] = 3;
                nextSlot[1] = 7;
            break;
            case 3:
                nextSlot = array(3);
                nextSlot[0] = 2;
                nextSlot[1] = 5;
                nextSlot[2] = 8;
            break;
            case 4:
                nextSlot = array(4);
                nextSlot[0] = 1;
                nextSlot[1] = 3;
                nextSlot[2] = 5;
                nextSlot[3] = 7;
            break;
            case 5:
                nextSlot = array(5);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 4;
                nextSlot[3] = 6;
                nextSlot[4] = 8;
            break;
            case 6:
                nextSlot = array(6);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 3;
                nextSlot[3] = 5;
                nextSlot[4] = 6;
                nextSlot[5] = 8;
            break;
            case 7:
                nextSlot = array(7);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 3;
                nextSlot[3] = 4;
                nextSlot[4] = 6;
                nextSlot[5] = 7;
                nextSlot[6] = 8;
            break;
            case 8:
                nextSlot = array(8);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
            break;
            case 9:
                nextSlot = array(9);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
                nextSlot[8] = 8;
            break;
        }
        
        while(!ds_stack_empty(moveStack)){
            tempTile = ds_stack_pop(moveStack);
            while(tempTile.cost != 1){
                tempTile.cost -= 1;
                curSpot += 1;
            }
            global.teamOne[p].moveArray[nextSlot[curSpot]] = tempTile;
        }
    }
    if(global.teamTwo[p].destTile != 0){
        tempTile = global.teamOne[p].destTile;
        while(tempTile != 0){
            ds_stack_push(moveStack, tempTile);
            tempTile = tempTile.originTile;
        }
        
        switch(global.teamTwo[p].movement){
            case 1:
                nextSlot = array(1);
                nextSlot[0] = 8;
            break;
            case 2:
                nextSlot = array(2);   
                nextSlot[0] = 3;
                nextSlot[1] = 7;
            break;
            case 3:
                nextSlot = array(3);
                nextSlot[0] = 2;
                nextSlot[1] = 5;
                nextSlot[2] = 8;
            break;
            case 4:
                nextSlot = array(4);
                nextSlot[0] = 1;
                nextSlot[1] = 3;
                nextSlot[2] = 5;
                nextSlot[3] = 7;
            break;
            case 5:
                nextSlot = array(5);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 4;
                nextSlot[3] = 6;
                nextSlot[4] = 8;
            break;
            case 6:
                nextSlot = array(6);
                nextSlot[0] = 0;
                nextSlot[1] = 2;
                nextSlot[2] = 3;
                nextSlot[3] = 5;
                nextSlot[4] = 6;
                nextSlot[5] = 8;
            break;
            case 7:
                nextSlot = array(7);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 3;
                nextSlot[3] = 4;
                nextSlot[4] = 6;
                nextSlot[5] = 7;
                nextSlot[6] = 8;
            break;
            case 8:
                nextSlot = array(8);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
            break;
            case 9:
                nextSlot = array(9);
                nextSlot[0] = 0;
                nextSlot[1] = 1;
                nextSlot[2] = 2;
                nextSlot[3] = 3;
                nextSlot[4] = 4;
                nextSlot[5] = 5;
                nextSlot[6] = 6;
                nextSlot[7] = 7;
                nextSlot[8] = 8;
            break;
        }
        
        while(!ds_stack_empty(moveStack)){
            tempTile = ds_stack_pop(moveStack);
            while(tempTile.cost != 1){
                tempTile.cost -= 1;
                curSpot += 1;
            }
            global.teamOne[p].moveArray[nextSlot[curSpot]] = tempTile;
        }
    }
}

while(tick &lt; 9){ //time step
    if(canRun){
        for(var i = 0; i &lt; global.teamSize; i++){ //going through all character at each time step
            if(global.teamOne[i].moveArray[tick] != 0){
               global.teamOne[i].x =  global.teamOne[i].moveArray[tick].x;
               global.teamOne[i].y =  global.teamOne[i].moveArray[tick].y;
            }
            if(global.teamTwo[i].moveArray[tick] != 0){
               global.teamTwo[i].x =  global.teamTwo[i].moveArray[tick].x;
               global.teamTwo[i].y =  global.teamTwo[i].moveArray[tick].y;
            }
        }
        //Check Colisions/Do Combat
       // canRun = false;
        tick += 1;
        //if(alarm[0] &lt; 0){
        //    alarm[0] = room_speed*1.5;
        //}
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sets can run
canRun = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
