<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Soldier</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set the teams based off of team size selected
//set the teams initially in the drafting screen
if(room==MainMenu){
    //set initial arrays
    global.teamOne = array(global.teamSize);
    global.teamTwo = array(global.teamSize);
    
    for(i=0; i&lt;global.teamSize; i++){
        //set team one
        global.teamOne[i] = instance_create(0,0,Character);
        global.teamOne[i].persistent = true;
        
        //set team two
        global.teamTwo[i] = instance_create(0,0,Character);
        global.teamTwo[i].persistent = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place the gui drawer in each room 
instance_create(0,0, DrawTextObject);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///intitial setup for maps


//global.gameMapSize=1;
//pick which size of maps you are using
switch(global.gameSize){
    case 3:
        if(global.gameMapSize==0){
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    break;
                    
                case 2:
                    global.mapSize=30;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.87;
                    global.playerOneOb.originRow = 29;
                    global.playerOneOb.originCol = 15;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                    myFile= file_text_open_read("smallCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    break;
                case 3:
                
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 8;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdL.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    break
            }
            
            //set the starting positions for drawing the maps in split screen
            global.startingXOne=160;
            global.startingXTwo = 960;
            global.startingY = 210;
            
        }
        else if(global.gameMapSize==1){
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 16;
                    global.playerOneOb.originCol = 1;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 18;
                    myFile=file_text_open_read("mediumStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    break;
                    
                case 2:
                    global.mapSize=40;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.406;
                    global.playerOneOb.originRow = 39;
                    global.playerOneOb.originCol = 21;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 19;
                    myFile= file_text_open_read("mediumCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    break;
                case 3:
                
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 11;
                    myFile=file_text_open_read("mediumStrongholdI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    break
            }
            
            //set the starting positions for drawing the maps in split screen
            global.startingXOne=80;
            global.startingXTwo = 880;
            global.startingY = 130;
        }
        break;
    case 5: 
            if(global.gameMapSize==0){
            //need to set starting map
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210;
                    break;
                    
                case 2:
                    global.mapSize=24;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.344;
                    global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 23;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                    myFile= file_text_open_read("smallSuburbanR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=208;
                    global.startingXTwo = 1008;
                    global.startingY = 258
                    break;
                    
                case 3:
                    global.mapSize=30;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.87;
                    global.playerOneOb.originRow = 29;
                    global.playerOneOb.originCol = 15;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                    myFile= file_text_open_read("smallCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210
                    break;
                case 4:
                    global.mapSize=24;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.344;
                    global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 13;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 13;
                    myFile= file_text_open_read("smallSuburbanI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210
                    break;
                case 5:
                
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdL.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210
                    break;
            }
            
            
        }
        else if(global.gameMapSize==1){
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 16;
                    global.playerOneOb.originCol = 1;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 18;
                    myFile=file_text_open_read("mediumStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
                    
                case 2:
                    global.mapSize=32;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.758;
                    global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 31;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                    myFile= file_text_open_read("mediumSuburbanR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=144;
                    global.startingXTwo = 944;
                    global.startingY = 194;
                    break;
                case 3: 
                    global.mapSize=40;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.406;
                    global.playerOneOb.originRow = 39;
                    global.playerOneOb.originCol = 21;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 19;
                    myFile= file_text_open_read("mediumCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
                case 4:
                    global.mapSize=32;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.758;
                    global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 16;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                    myFile= file_text_open_read("mediumSuburbanI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=144;
                    global.startingXTwo = 944;
                    global.startingY = 194;
                    break;
                case 5:
                
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 11;
                    myFile=file_text_open_read("mediumStrongholdI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break
            }
            

        }
        break;
    
    case 7: 
            if(global.gameMapSize==0){
            //need to set starting map
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210;
                    break;
                    
                case 2:
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.8125;
                    global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 11;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 9;
                    myFile= file_text_open_read("smallRuralR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic Rural Area";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;

                    break;
                case 3:
                    global.mapSize=24;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.344;
                    global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 23;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                    myFile= file_text_open_read("smallSuburbanR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=208;
                    global.startingXTwo = 1008;
                    global.startingY = 258;

                    break;    
                
                case 4:
                    global.mapSize=30;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.875;
                    global.playerOneOb.originRow = 29;
                    global.playerOneOb.originCol = 15;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                    myFile= file_text_open_read("smallCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210;

                    break;
                case 5:
                    global.mapSize=24;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.344;
                    global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 13;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 13;
                    myFile= file_text_open_read("smallSuburbanI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=208;
                    global.startingXTwo = 1008;
                    global.startingY = 258;
                    break;
                case 6:
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.8125;
                    global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 11;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 9;
                    myFile= file_text_open_read("smallRuralI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist Rural Area";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
                    
                case 7:
                    global.mapSize=15;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=3.75;
                    global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                    myFile=file_text_open_read("smallStrongholdL.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=160;
                    global.startingXTwo = 960;
                    global.startingY = 210;
                    break;
            }
            
        }
        else if(global.gameMapSize==1){
            switch(global.currentMap)
            {
                case 1:
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 16;
                    global.playerOneOb.originCol = 1;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 18;
                    myFile=file_text_open_read("mediumStrongholdR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
                case 2:
                    global.mapSize=27;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.083;
                    global.playerOneOb.originRow = 26;
                    global.playerOneOb.originCol = 14;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 14;
                    myFile= file_text_open_read("mediumRuralR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic Rural Area";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=184;
                    global.startingXTwo = 984;
                    global.startingY = 234;
                    break;
                case 3:
                    global.mapSize=32;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.758;
                    global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 31;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                    myFile= file_text_open_read("mediumSuburbanR.txt");
                    DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=144;
                    global.startingXTwo = 944;
                    global.startingY = 194;
                    break;
                case 4: 
                    global.mapSize=40;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.406;
                    global.playerOneOb.originRow = 39;
                    global.playerOneOb.originCol = 21;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 19;
                    myFile= file_text_open_read("mediumCity.txt");
                    DrawTextObject.splitScreenTitle="City of O' Bellum";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
                case 5:
                    global.mapSize=32;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=1.758;
                    global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 16;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                    myFile= file_text_open_read("mediumSuburbanI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=144;
                    global.startingXTwo = 944;
                    global.startingY = 194;
                    break;
                case 6: 
                    global.mapSize=27;
                    global.spriteScaleSplit=1;
                    global.spriteScaleFull=2.083;
                    global.playerOneOb.originRow = 26;
                    global.playerOneOb.originCol = 14;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 14;
                    myFile= file_text_open_read("mediumRuralI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist Rural Area";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=184;
                    global.startingXTwo = 984;
                    global.startingY = 234;
                    break;
                case 7:
                
                    global.mapSize=20;
                    global.spriteScaleSplit=2;
                    global.spriteScaleFull=2.813;
                    global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 11;
                    myFile=file_text_open_read("mediumStrongholdI.txt");
                    DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                    //set the starting positions for drawing the maps in split screen
                    global.startingXOne=80;
                    global.startingXTwo = 880;
                    global.startingY = 130;
                    break;
            }
            

        }
        break;
    case 9: 
        if(global.gameMapSize==0){
        //need to set starting map
        switch(global.currentMap)
        {
            case 1:
                global.mapSize=15;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=3.75;
                global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                myFile=file_text_open_read("smallStrongholdR.txt");
                DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=160;
                global.startingXTwo = 960;
                global.startingY = 210;
                break;
                
            case 2:
                global.mapSize=20;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=2.8125;
                global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 11;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 9;
                myFile= file_text_open_read("smallRuralR.txt");
                DrawTextObject.splitScreenTitle = "Romantic Rural Area";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=80;
                global.startingXTwo = 880;
                global.startingY = 130;

                break;
            case 3:
                global.mapSize=24;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.344;
                global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 23;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                myFile= file_text_open_read("smallSuburbanR.txt");
                DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=208;
                global.startingXTwo = 1008;
                global.startingY = 258;

                break;    
            case 4:
                global.mapSize=27;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.083;
                global.playerOneOb.originRow = 24;
                    global.playerOneOb.originCol = 14;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 14;
                myFile= file_text_open_read("smallOutercityR.txt");
                DrawTextObject.splitScreenTitle = "O' Bellum Outer City - Romantic Side";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=184;
                global.startingXTwo = 984;
                global.startingY = 234;
                break;
            case 5:
                global.mapSize=30;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.875;
                global.playerOneOb.originRow = 29;
                    global.playerOneOb.originCol = 15;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                myFile= file_text_open_read("smallCity.txt");
                DrawTextObject.splitScreenTitle="City of O' Bellum";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=160;
                global.startingXTwo = 960;
                global.startingY = 210;

                break;
            case 6: 
                global.mapSize=27;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.083;
                global.playerOneOb.originRow = 26;
                    global.playerOneOb.originCol = 26;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                myFile= file_text_open_read("smallOutercityI.txt");
                DrawTextObject.splitScreenTitle = "O' Bellum Outer City - Industrialist Side";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=184;
                global.startingXTwo = 984;
                global.startingY = 234;
                break;
            case 7:
                global.mapSize=24;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.344;
                global.playerOneOb.originRow = 23;
                    global.playerOneOb.originCol = 13;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 13;
                myFile= file_text_open_read("smallSuburbanI.txt");
                DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=208;
                global.startingXTwo = 1008;
                global.startingY = 258;
                break;
            case 8:
                global.mapSize=20;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=2.8125;
                global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 11;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 9;
                myFile= file_text_open_read("smallRuralI.txt");
                DrawTextObject.splitScreenTitle = "Industrialist Rural Area";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=80;
                global.startingXTwo = 880;
                global.startingY = 130;
                break;
                
            case 9:
                global.mapSize=15;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=3.75;
                global.playerOneOb.originRow = 13;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 1;
                    global.playerTwoOb.originCol = 7;
                myFile=file_text_open_read("smallStrongholdL.txt");
                DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=160;
                global.startingXTwo = 960;
                global.startingY = 210;
                break;
        }
        
    }
    else if(global.gameMapSize==1){
        switch(global.currentMap)
        {
            case 1:
                global.mapSize=20;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=2.813;
                global.playerOneOb.originRow = 16;
                    global.playerOneOb.originCol = 1;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 18;
                myFile=file_text_open_read("mediumStrongholdR.txt");
                DrawTextObject.splitScreenTitle = "Romantic's Stronghold";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=80;
                global.startingXTwo = 880;
                global.startingY = 130;
                break;
            case 2:
                global.mapSize=27;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.083;
                global.playerOneOb.originRow = 26;
                    global.playerOneOb.originCol = 14;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 14;
                myFile= file_text_open_read("mediumRuralR.txt");
                DrawTextObject.splitScreenTitle = "Romantic Rural Area";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=184;
                global.startingXTwo = 984;
                global.startingY = 234;
                break;
            case 3:
                global.mapSize=32;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.758;
                global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 31;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                myFile= file_text_open_read("mediumSuburbanR.txt");
                DrawTextObject.splitScreenTitle = "Romantic's Suburb";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=144;
                global.startingXTwo = 944;
                global.startingY = 194;
                break;
            case 4:
                global.mapSize=36;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.563;
                global.playerOneOb.originRow = 33;
                    global.playerOneOb.originCol = 18;
                    global.playerTwoOb.originRow = 2;
                    global.playerTwoOb.originCol = 17;
                myFile= file_text_open_read("mediumOutercityR.txt");
                DrawTextObject.splitScreenTitle = "O' Bellum Outer City - Romantic Side";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=112;
                global.startingXTwo = 912;
                global.startingY = 162;
                break;
            case 5: 
                global.mapSize=40;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.406;
                global.playerOneOb.originRow = 39;
                    global.playerOneOb.originCol = 21;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 19;
                myFile= file_text_open_read("mediumCity.txt");
                DrawTextObject.splitScreenTitle="City of O' Bellum";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=80;
                global.startingXTwo = 880;
                global.startingY = 130;
                break;
            case 6: 
                global.mapSize=36;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.563;
                global.playerOneOb.originRow = 35;
                    global.playerOneOb.originCol = 35;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 0;
                myFile= file_text_open_read("mediumOutercityI.txt");
                DrawTextObject.splitScreenTitle = "O' Bellum Outer City - Industrialist Side";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=112;
                global.startingXTwo = 912;
                global.startingY = 162;
                break;
            case 7:
                global.mapSize=32;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=1.758;
                global.playerOneOb.originRow = 31;
                    global.playerOneOb.originCol = 16;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 15;
                myFile= file_text_open_read("mediumSuburbanI.txt");
                DrawTextObject.splitScreenTitle = "Industrialist's Suburb";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=144;
                global.startingXTwo = 944;
                global.startingY = 194;
                break;
            case 8: 
                global.mapSize=27;
                global.spriteScaleSplit=1;
                global.spriteScaleFull=2.083;
                global.playerOneOb.originRow = 26;
                    global.playerOneOb.originCol = 14;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 14;
                myFile= file_text_open_read("mediumRuralI.txt");
                DrawTextObject.splitScreenTitle = "Industrial Rural Area";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=184;
                global.startingXTwo = 984;
                global.startingY = 234;
                break;
            case 9:
            
                global.mapSize=20;
                global.spriteScaleSplit=2;
                global.spriteScaleFull=2.813;
                global.playerOneOb.originRow = 19;
                    global.playerOneOb.originCol = 9;
                    global.playerTwoOb.originRow = 0;
                    global.playerTwoOb.originCol = 11;
                myFile=file_text_open_read("mediumStrongholdI.txt");
                DrawTextObject.splitScreenTitle = "Industrialist's Stronghold";
                //set the starting positions for drawing the maps in split screen
                global.startingXOne=80;
                global.startingXTwo = 880;
                global.startingY = 130;
                break;
        }
        

    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup the players

if(!instance_exists(PlayerOne))
{
    p = instance_create(0,0,PlayerOne);
    p.lvPoints = 10;
}

if(!instance_exists(PlayerTwo))
{
    g = instance_create(0,0,PlayerTwo);
    g.lvPoints = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup drafting screen
pool = ds_grid_create(12,2);
draftTurn = 0;

var startingY = 100;
var newX=50;
var newY=50;
var buttonSpacing = 100;

if(room==Drafting)
{
    for( i=0; i&lt; 2; i+=1)
    {
        for(j=0; j&lt;12;j+=1)
        {
            newButton = instance_create(newX,newY+startingY,CharacterButton);
            pool[i,j]=newButton;
            newX+=buttonSpacing;      
        }

        newX=50;
        newY+=buttonSpacing;
    }
    
    //set all of the character sprites
    var j = 0;
    for(i=0; i&lt;24; i+=1)
    {
        pool[j,i%12].spriteToDraw=global.allCharacters[i];
        //show_message("tile "+ string(j)+" "+string(i%12)+ " " +string(pool[i%2,i%12]))
    
        
        if(i==11)
            j+=1;
    }
    
    //setting the initial highlighting position of player
GameMaster.pool[PlayerOne.draftRow, PlayerOne.draftCol].playerOneHighlighted=true;
GameMaster.pool[PlayerTwo.draftRow, PlayerTwo.draftCol].playerTwoHighlighted=true;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up map
tick = 0;
moveAlg = false;
canRun = true;
//mapNum = 2;


spriteScaleFull=global.spriteScaleFull ; //1.66666667 scaling of sprites to fit full screen top to bottom
spriteScaleSplit=global.spriteScaleSplit; //1.66666667 scaling of sprites to fit full screen top to bottom

switch(room){
    case FullScreen: 
        // for full screen
        
        startingX=350;
        global.startingX = startingX;
        startingY=0;
        global.startingY = startingY;
        
        
        tilePosConst = 16*spriteScaleFull;
        //set initial ds grid
        var i, j, z;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
           {
             tempTile = instance_create(j*16, i*16, Tile);
             global.roomTiles[tempTile.x/(16),tempTile.y/(16)] = tempTile;
             var temp = file_text_read_real(myFile);
             global.roomTiles[j,i].tileType = temp;
             //if(global.currentMap == global.walls[0,0]){
                 for(var p = 1; p &lt; 6; p++){
                    if(i == global.walls[p,1] &amp;&amp; j == global.walls[p,0]) {global.roomTiles[j,i].tileType  = 5;}
                 }
             //}
           }
        }

        //rotate the grid

        rotatedGrid = ds_grid_create(global.mapSize,global.mapSize);
        
        for (i = 0; i &lt;global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
            {
                rotatedGrid[j,global.mapSize-i-1]=global.roomTiles[i,j].id;
                rotatedGrid[j,global.mapSize-i-1].tileType=global.roomTiles[i,j].tileType;
                
            }
        }
        
        //draw grid
        for (i = 0; i &lt;global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
            {
                rotatedGrid[i,j].image_xscale=spriteScaleFull;
                rotatedGrid[i,j].image_yscale=spriteScaleFull;
                rotatedGrid[i,j].x=i*tilePosConst+startingX;
                rotatedGrid[i,j].y=j*tilePosConst+startingY;              
            }
        }
        
        //place characters and objectives
        for(z=0; z&lt;global.teamSize; z+=1){
            n=global.teamOne[z].originRow
            global.teamOne[z].row = global.mapSize-global.teamOne[z].originCol-1;
            global.teamOne[z].col = n;

            n=global.teamTwo[z].originRow    
            global.teamTwo[z].row = global.mapSize-global.teamTwo[z].originCol-1;
            global.teamTwo[z].col= n;
            
            //show_message(global.teamTwo[z].moveArray[2]);
        }
        
        //Set the objectives
        n=global.playerOneOb.originRow;
        global.playerOneOb.row = global.mapSize-global.playerOneOb.originCol-1;
        global.playerOneOb.col = n;    
      
        //check if objective two goes on this tile

        n=global.playerTwoOb.originRow;
        global.playerTwoOb.row = global.mapSize-global.playerTwoOb.originCol-1;
        global.playerTwoOb.col = n;
        
        for(z=0; z&lt;global.teamSize; z+=1)
        {
            //set team one characters    
            global.teamOne[z].image_xscale=spriteScaleFull;
            global.teamOne[z].image_yscale=spriteScaleFull;
            global.teamOne[z].x = global.teamOne[z].col*tilePosConst+startingX;
            global.teamOne[z].y = global.teamOne[z].row*tilePosConst+startingY;
            
            //set team two characters
            global.teamTwo[z].image_xscale=spriteScaleFull;
            global.teamTwo[z].image_yscale=spriteScaleFull;
            global.teamTwo[z].x = global.teamTwo[z].col*tilePosConst+startingX;
            global.teamTwo[z].y = global.teamTwo[z].row*tilePosConst+startingY;
           
            //set objects
            global.playerOneOb.image_xscale=spriteScaleFull;
            global.playerOneOb.image_yscale=spriteScaleFull;
            global.playerOneOb.x = global.playerOneOb.col*tilePosConst+startingX;
            global.playerOneOb.y = global.playerOneOb.row*tilePosConst+startingY;

            global.playerTwoOb.image_xscale=spriteScaleFull;
            global.playerTwoOb.image_yscale=spriteScaleFull;
            global.playerTwoOb.x = global.playerTwoOb.col*tilePosConst+startingX;
            global.playerTwoOb.y = global.playerTwoOb.row*tilePosConst+startingY;               

        }
        //set initial position of the players cursors - we no need cursors on this screen
        //global.roomTiles[PlayerOne.curCol,PlayerOne.curRow].playerOneSelected=true;
        //global.roomTiles[PlayerTwo.curCol,PlayerTwo.curRow].playerTwoSelected=true;
                
        break;     
        
    case SplitScreen:
        
        startingXOne = global.startingXOne;
        startingXTwo = global.startingXTwo;
        startingY = global.startingY;

        
        tilePosConst = 16*spriteScaleSplit;
        //set initial ds grid
        var i, j, z;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
        for (j = 0; j &lt; global.mapSize; j += 1)
           {
             tempTile = instance_create(j*tilePosConst+startingY*16, 16*i*tilePosConst+startingXTwo, Tile);
             global.roomTiles[j,i] = tempTile;
             var temp = file_text_read_real(myFile);
             global.roomTiles[j,i].tileType = temp;
             //if(global.currentMap == global.walls[0,0]){
                 for(var p = 1; p &lt; 6; p++){
                    if(i == global.walls[p,1] &amp;&amp; j == global.walls[p,0]) {global.roomTiles[j,i].tileType  = 5;}
                 }
             //}
           }
        }
// ----------------------------------------------------------------------------------
        if(global.setup){
            //player one goes on the bottom - player two goes on the top
            for(var char = 0; char&lt;global.teamSize; char++){
              var bool = true;
             for(var i=global.mapSize-1; i&lt;=global.mapSize-2; i++)
             {
                 for(var j = global.mapSize-1; j&gt;=0;j--){
                     //show_message("tile type: "+string(global.roomTiles[i,j].tileType));
                         if(global.roomTiles[i,j].tileType&lt;3 ){
                             //set the characters starting row and col to this position
                             //show_message ("placing character "+string(char)+" at: "+string(i)+" "+string(j));
                             for(var g = 0; g &lt; global.teamSize; g++){
                                if(global.teamOne[g].originRow == i &amp;&amp; global.teamOne[g].originCol == j){
                                    bool = false;
                                }
                             }
                             if(bool){
                                global.teamOne[char].originRow = i;
                                global.teamOne[char].originCol = j;
                             }
      //move to next character
                         }
                    }
                 }
             }

             
             for(var char = 0; char&lt;global.teamSize; char++){
              var bool = true;
             for(var i=0; i&lt;2; i++)
             {
                 for(var j = global.mapSize-1; j&gt;=0;j--){
                     //show_message("tile type: "+string(global.roomTiles[i,j].tileType));
                         if(global.roomTiles[i,j].tileType&lt;3 ){
                             //set the characters starting row and col to this position
                             //show_message ("placing character "+string(char)+" at: "+string(i)+" "+string(j));
                             for(var g = 0; g &lt; global.teamSize; g++){
                                if(global.teamTwo[g].originRow == i &amp;&amp; global.teamTwo[g].originCol == j){
                                    bool = false;
                                }
                             }
                             if(bool){
                                global.teamTwo[char].originRow = i;
                                global.teamTwo[char].originCol = j;
                             }
      //move to next character
                         }
                    }
                 }
             }
         }
//----------------------------------------------------------------------------------------------
        
        //Make one copy
        var temp;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
               {
                    //make flipped copy of player two 
                    temp=instance_create(0,0,Tile);
                    temp.tileType = global.roomTiles[global.mapSize-i-1,global.mapSize-j-1].tileType;
                    global.gridTwo[i,j]=temp;
               }
        }
        
        //draw the things
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
                {
                    //move player ones grid into position
                    global.roomTiles[i,j].image_xscale=spriteScaleSplit;
                    global.roomTiles[i,j].image_yscale=spriteScaleSplit;
                    global.roomTiles[i,j].x=i*tilePosConst+startingXTwo;
                    global.roomTiles[i,j].y=j*tilePosConst+startingY;  
                    
                    //move player twos grid into position
                    global.gridTwo[i,j].image_xscale=spriteScaleSplit;
                    global.gridTwo[i,j].image_yscale=spriteScaleSplit;
                    global.gridTwo[i,j].x=i*tilePosConst+startingXOne;
                    global.gridTwo[i,j].y=j*tilePosConst+startingY; 
                    
                }
        }
        
        //place origins of cursors
        global.roomTiles[PlayerOne.curCol,PlayerOne.curRow].playerOneSelected=true;
        global.gridTwo[PlayerTwo.curCol,PlayerTwo.curRow].playerTwoSelected=true;
        
        
        //place characters and objectives - move player one to opposite side of grid
        for(z=0; z&lt;global.teamSize; z+=1){
            global.teamTwo[z].col = global.mapSize-global.teamTwo[z].originCol-1;
            global.teamTwo[z].row = global.mapSize-global.teamTwo[z].originRow-1;
  
            global.teamOne[z].col = global.teamOne[z].originCol;
            global.teamOne[z].row= global.teamOne[z].originRow;
        }
        
        //Set the objectives
        global.playerOneOb.col = global.mapSize-global.playerOneOb.originCol-1;
        global.playerOneOb.row = global.mapSize-global.playerOneOb.originRow-1;    
      
        //check if objective two goes on this tile
        global.playerTwoOb.col = global.playerTwoOb.originCol;
        global.playerTwoOb.row =global.playerTwoOb.originRow;
        
        for(z=0; z&lt;global.teamSize; z+=1)
        {
            //set team one characters    
            global.teamOne[z].image_xscale=spriteScaleSplit;
            global.teamOne[z].image_yscale=spriteScaleSplit;
            global.teamOne[z].x = global.teamOne[z].col*tilePosConst+startingXTwo;
            global.teamOne[z].y = global.teamOne[z].row*tilePosConst+startingY;
            
            //set team two characters
            global.teamTwo[z].image_xscale=spriteScaleSplit;
            global.teamTwo[z].image_yscale=spriteScaleSplit;
            global.teamTwo[z].x = global.teamTwo[z].col*tilePosConst+startingXOne ;
            global.teamTwo[z].y = global.teamTwo[z].row*tilePosConst+startingY;
           
            //set objects
            global.playerOneOb.image_xscale=spriteScaleSplit;
            global.playerOneOb.image_yscale=spriteScaleSplit;
            global.playerOneOb.x = global.playerOneOb.col*tilePosConst+startingXOne;
            global.playerOneOb.y = global.playerOneOb.row*tilePosConst+startingY;

            global.playerTwoOb.image_xscale=spriteScaleSplit;
            global.playerTwoOb.image_yscale=spriteScaleSplit;
            global.playerTwoOb.x = global.playerTwoOb.col*tilePosConst+startingXTwo;
            global.playerTwoOb.y = global.playerTwoOb.row*tilePosConst+startingY;               

        }
        
        //Copy teams and draw seconds on screen
        copyTeamOne = array(global.teamSize);
        
        for (z=0; z&lt; global.teamSize; z+=1)
        {
            if(global.teamOne[z].hp&gt;0){
                copyTeamOne[z] = instance_create(0,0, Character);
                copyTeamOne[z].sprite_index = global.teamOne[z].sprite_index;
                copyTeamOne[z].originRow = global.mapSize-global.teamOne[z].originRow-1;
                copyTeamOne[z].originCol = global.mapSize-global.teamOne[z].originCol-1;
                
                //move to correct location
                copyTeamOne[z].image_xscale=spriteScaleSplit;
                copyTeamOne[z].image_yscale=spriteScaleSplit;
                copyTeamOne[z].x = copyTeamOne[z].originCol*tilePosConst+startingXOne;
                copyTeamOne[z].y = copyTeamOne[z].originRow*tilePosConst+startingY;
                
                //set the hp of the copies?
                copyTeamOne[z].hp = global.teamOne[z].hp;
            }
            
            if(global.teamTwo[z].hp&gt;0){
                copyTeamTwo[z] = instance_create(0,0, Character);
                copyTeamTwo[z].sprite_index = global.teamTwo[z].sprite_index;
                copyTeamTwo[z].originRow = global.teamTwo[z].originRow;
                copyTeamTwo[z].originCol = global.teamTwo[z].originCol;
                
                //set team two characters    
                copyTeamTwo[z].image_xscale=spriteScaleSplit;
                copyTeamTwo[z].image_yscale=spriteScaleSplit;
                copyTeamTwo[z].x = copyTeamTwo[z].originCol*tilePosConst+startingXTwo;
                copyTeamTwo[z].y = copyTeamTwo[z].originRow*tilePosConst+startingY;
                
                //set the hp of the copies?
                copyTeamTwo[z].hp = global.teamTwo[z].hp;
            }
        }
            //set objects Copies
            PlayerOneObjectiveCopy = instance_create(0,0, PlayerOneObjective);
            PlayerOneObjectiveCopy.col=global.playerOneOb.col;
            PlayerOneObjectiveCopy.col = global.mapSize - PlayerOneObjectiveCopy.col -1;
            PlayerOneObjectiveCopy.row=global.playerOneOb.row
            PlayerOneObjectiveCopy.row = global.mapSize - PlayerOneObjectiveCopy.row -1;
            
            PlayerOneObjectiveCopy.image_xscale=spriteScaleSplit;
            PlayerOneObjectiveCopy.image_yscale=spriteScaleSplit;
            PlayerOneObjectiveCopy.x = PlayerOneObjectiveCopy.col*tilePosConst+startingXTwo;
            PlayerOneObjectiveCopy.y = PlayerOneObjectiveCopy.row*tilePosConst+startingY;

            PlayerTwoObjectiveCopy = instance_create(0,0, PlayerTwoObject);
            PlayerTwoObjectiveCopy.col=global.playerTwoOb.col;
            PlayerTwoObjectiveCopy.col = global.mapSize - PlayerTwoObjectiveCopy.col -1;
            PlayerTwoObjectiveCopy.row=global.playerTwoOb.row
            PlayerTwoObjectiveCopy.row = global.mapSize - PlayerTwoObjectiveCopy.row -1;
            
            PlayerTwoObjectiveCopy.image_xscale=spriteScaleSplit;
            PlayerTwoObjectiveCopy.image_yscale=spriteScaleSplit;
            PlayerTwoObjectiveCopy.x = PlayerTwoObjectiveCopy.col*tilePosConst+startingXOne;
            PlayerTwoObjectiveCopy.y = PlayerTwoObjectiveCopy.row*tilePosConst+startingY;
            
            if(global.setup){
                for (i = 0; i &lt; global.mapSize; i += 1)
                {
                    global.roomTiles[i,global.mapSize-2].canMove = true;
                    global.roomTiles[i,global.mapSize-1].canMove = true;
                    global.gridTwo[i,global.mapSize-2].canMove = true;
                    global.gridTwo[i,global.mapSize-1].canMove = true;
                }
            }
        break;  

    }        

file_text_close(myFile);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable for room
//size = ds_grid_width(global.roomTiles);
charOne = 0;
charTwo = 0;
toMove = 0;
/*
switch(mapNum){
    case 1:
        global.roomSize = 30;
        break;
    case 2: 
        global.roomSize = 30;
        break;
}
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set visibility of characters based on room

if(room==SplitScreen||room==FullScreen){
    for(i=0; i&lt; global.teamSize;i+=1){
        global.teamOne[i].visible=true;
        global.teamTwo[i].visible=true;
        global.playerOneOb.visible=true;
        global.playerTwoOb.visible=true;
    }
}
else{
    for(i=0; i&lt; global.teamSize;i+=1){
        global.teamOne[i].visible=false;
        global.teamTwo[i].visible=false;
        global.playerOneOb.visible=false;
        global.playerTwoOb.visible=false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if in drafting screen create draft text
if(room==Drafting)
{
    instance_create(0,0,DraftTextPlayerTwo);
    instance_create(0,0, DraftTextPlayerOne);
    selectedChar = instance_create(0,0,CharInfo);
    selectedCharInfo = instance_create(500, 500, Character);
    selectedCharInfo.visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup the bonus screen shtuff




if(room==BonusScreen){
//values to be used
//ui values to use
teamToHeal = 0;
playerTwoX= 250;
playerOneX=250+800;
Y = 100;

teamY=620;
teamTwoX = 20;
teamOneX = 810;
spacing = 10;

//Create arrays of the character buttons
TeamOne= ds_grid_create(6,2);
TeamTwo = ds_grid_create(6,2);

PlayerOne.selectedBonus=false;
PlayerTwo.selectedBonus=false;

//put the gui drawer
//instance_create(0,0, DrawTextObject);

    //set the initial selected buttons
    currentIncrementOne = 0;
    currentIncrementTwo = 0;     
    
    //set up array of buttons dependent on bonuses
    switch(global.PlayerWon){
        case 1:
            playerOneBonuses=array(3);
            playerTwoBonuses = array(5);
            break;
        case 2:
            playerOneBonuses=array(5);
            playerTwoBonuses = array(3);
            break;
        default:
            playerOneBonuses=array(3);
            playerTwoBonuses = array(3);
            break;
    }
    
    //set up player two buttons
    for(i=0;i&lt;array_length_1d(playerTwoBonuses);i++){
        playerTwoBonuses[i]=instance_create(playerTwoX,80*i+Y,buttonObjectBonus);
        playerTwoBonuses[i].buttonText=global.bonusStrings[i];
        playerTwoBonuses[i].action = i;
        playerTwoBonuses[i].player=2;
        
    }
    for(i=0;i&lt;array_length_1d(playerOneBonuses);i++){
        playerOneBonuses[i]=instance_create(playerOneX,80*i+Y,buttonObjectBonus);
        playerOneBonuses[i].buttonText=global.bonusStrings[i];
        playerOneBonuses[i].action = i;
        playerOneBonuses[i].player=1;
    }
    
    //place team buttons on bottom of screen 
    buttonCount =0; 
    for(i=0; i&lt;2; i++){
        for(j=0; j&lt;6; j++){
            if(buttonCount&lt;global.teamSize){
                // set player one's team buttons
                TeamOne[i,j]=instance_create(teamOneX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamOne[i,j].spriteToDraw= global.teamOne[buttonCount].sprite_index;
                TeamOne[i,j].hpVal = floor(global.teamOne[buttonCount].hp);
                TeamOne[i,j].hpMax = global.teamOne[buttonCount].maxHp;
                TeamOne[i,j].attackVal = global.teamOne[buttonCount].attack;
                TeamOne[i,j].moveVal = global.teamOne[buttonCount].movement;
                TeamOne[i,j].defVal = global.teamOne[buttonCount].defence;
                
                // set player two's team buttons
                TeamTwo[i,j]=instance_create(teamTwoX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamTwo[i,j].spriteToDraw= global.teamTwo[buttonCount].sprite_index;
                TeamTwo[i,j].hpVal = floor(global.teamTwo[buttonCount].hp);
                TeamTwo[i,j].hpMax = global.teamTwo[buttonCount].maxHp;
                TeamTwo[i,j].attackVal = global.teamTwo[buttonCount].attack;
                TeamTwo[i,j].moveVal = global.teamTwo[buttonCount].movement;
                TeamTwo[i,j].defVal = global.teamTwo[buttonCount].defence;
                
                buttonCount++;
            }
            else{
                TeamOne[i,j] = 0;
                TeamTwo[i,j] = 0;
            }
        }
        teamY+=spacing+130;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up level up menu



if(room==LevelUpMenu){
teamY=315;
teamTwoX = 105;
teamOneX = 905;
spacing = 10;

TeamOne= ds_grid_create(6,2);
TeamTwo = ds_grid_create(6,2);

PlayerOne.selectedBonus=false;
PlayerTwo.selectedBonus=false;


//place team buttons on bottom of screen 
    buttonCount =0; 
    for(i=0; i&lt;2; i++){
        for(j=0; j&lt;6; j++){
            if(buttonCount&lt;global.teamSize){
                // set player one's team buttons
                TeamOne[i,j]=instance_create(teamOneX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamOne[i,j].spriteToDraw= global.teamOne[buttonCount].sprite_index;
                TeamOne[i,j].hpVal = floor(global.teamOne[buttonCount].hp);
                TeamOne[i,j].hpMax = global.teamOne[buttonCount].maxHp;
                TeamOne[i,j].attackVal = global.teamOne[buttonCount].attack;
                TeamOne[i,j].moveVal = global.teamOne[buttonCount].movement;
                TeamOne[i,j].defVal = global.teamOne[buttonCount].defence;
                
                // set player two's team buttons
                TeamTwo[i,j]=instance_create(teamTwoX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamTwo[i,j].spriteToDraw= global.teamTwo[buttonCount].sprite_index;
                TeamTwo[i,j].hpVal = floor(global.teamTwo[buttonCount].hp);
                TeamTwo[i,j].hpMax = global.teamTwo[buttonCount].maxHp;
                TeamTwo[i,j].attackVal = global.teamTwo[buttonCount].attack;
                TeamTwo[i,j].moveVal = global.teamTwo[buttonCount].movement;
                TeamTwo[i,j].defVal = global.teamTwo[buttonCount].defence;
                
                buttonCount++;
            }
            else{
                TeamOne[i,j] = 0;
                TeamTwo[i,j] = 0;
            }
        }
        teamY+=spacing+130;
    }
    
    //Set initially highlighted tile
    GameMaster.TeamOne[PlayerOne.bonusRow, PlayerOne.bonusRow].playerOneHighlighted = true;
    GameMaster.TeamTwo[PlayerTwo.bonusRow, PlayerTwo.bonusRow].playerTwoHighlighted = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setting up the settings screen
settingNumCharacters=false;
settingMapSize = false;
settingNumMaps = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///heal all units by 10
if(teamToHeal == 1){
    for(var i = 0; i &lt; global.teamSize; i++){
        if(global.teamOne[i].hp &gt; 0){
            global.teamOne[i].hp += 10;
        }
        if(global.teamOne[i].hp &gt; global.teamOne[i].maxHp) {
            global.teamOne[i].hp = global.teamOne[i].maxHp;
        }
    }
}
if(teamToHeal == 2){
    for(var i = 0; i &lt; global.teamSize; i++){
        if(global.teamTwo[i].hp &gt; 0){
            global.teamTwo[i].hp += 10;
        }
        if(global.teamTwo[i].hp &gt; global.teamTwo[i].maxHp) {
            global.teamTwo[i].hp = global.teamTwo[i].maxHp;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set move alg to true

moveStack = ds_stack_create();
curSpot = 0;
nextSlot = 0;
tick = 0;


if(toMove.destTile != 0){
  tempTile = toMove.destTile;
  while(tempTile != 0){
      ds_stack_push(moveStack, tempTile);
      tempTile = tempTile.originTile;
  }

  switch(toMove.movement){
      case 1:
          nextSlot = array(1);
          nextSlot[0] = 8;
      break;
      case 2:
          nextSlot = array(2);   
          nextSlot[0] = 3;
          nextSlot[1] = 7;
      break;
      case 3:
          nextSlot = array(3);
          nextSlot[0] = 2;
          nextSlot[1] = 5;
          nextSlot[2] = 8;
      break;
      case 4:
          nextSlot = array(4);
          nextSlot[0] = 1;
          nextSlot[1] = 3;
          nextSlot[2] = 5;
          nextSlot[3] = 7;
      break;
      case 5:
          nextSlot = array(5);
          nextSlot[0] = 0;
          nextSlot[1] = 2;
          nextSlot[2] = 4;
          nextSlot[3] = 6;
          nextSlot[4] = 8;
      break;
      case 6:
          nextSlot = array(6);
          nextSlot[0] = 0;
          nextSlot[1] = 2;
          nextSlot[2] = 3;
          nextSlot[3] = 5;
          nextSlot[4] = 6;
          nextSlot[5] = 8;
      break;
      case 7:
          nextSlot = array(7);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 3;
          nextSlot[3] = 4;
          nextSlot[4] = 6;
          nextSlot[5] = 7;
          nextSlot[6] = 8;
      break;
      case 8:
          nextSlot = array(8);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 2;
          nextSlot[3] = 3;
          nextSlot[4] = 4;
          nextSlot[5] = 5;
          nextSlot[6] = 6;
          nextSlot[7] = 7;
      break;
      case 9:
          nextSlot = array(9);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 2;
          nextSlot[3] = 3;
          nextSlot[4] = 4;
          nextSlot[5] = 5;
          nextSlot[6] = 6;
          nextSlot[7] = 7;
          nextSlot[8] = 8;
      break;
  }
  ds_stack_pop(moveStack);
  toMove.moveArray = array(9);
  while(!ds_stack_empty(moveStack)){
      tempTile = ds_stack_pop(moveStack);
      while(tempTile.cost != 1){
          tempTile.cost -= 1;
          curSpot += 1;
      }
      
      toMove.moveArray[nextSlot[curSpot]] = tempTile.originDirect;
      curSpot += 1;
      //show_message("MoveArray: " + string(tempTile));
  }
  curSpot = 0;
}
//set the current cursor locations to not highlight





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///combat alg
switch(charOne.attack){
    case 1:
    var P = random_range(1,5);
    charOne.attackArray[0] = P/3;
    charOne.attackArray[1] = P/3;
    charOne.attackArray[2] = P/3;
    break;
    case 2:
    var p = random_range(1,5);
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = p/2;
    charOne.attackArray[2] = p/2;
    break;
    case 3:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}
switch(charTwo.attack){
    case 1:
    var p = random_range(1,5);
    charTwo.attackArray[0] = p/3;
    charTwo.attackArray[1] = p/3;
    charTwo.attackArray[2] = p/3;
    break;
    case 2:
    var p = random_range(1,5);
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = p/2;
    charTwo.attackArray[2] = p/2;
    break;
    case 3:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}
var sum1 = 0;
var sum2 = 0;
for(var g = 0; g &lt; 3; g++){  
    if(random_range(0,45) &gt; charOne.movement){ charOne.hp -= charTwo.attackArray[g]; sum2 += charTwo.attackArray[g];}
    if(random_range(0,45) &gt; charTwo.movement){ charTwo.hp -= charOne.attackArray[g]; sum1 += charOne.attackArray[g];}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sets can run
if(tick &lt; 9){ moveAlg = true; } else {tick = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simul movement algorithm

//time step
moveDist = 16*global.spriteScaleFull;
    if(moveAlg){
    //show_message("Alg");
        for(var b = 0; b &lt; global.teamSize; b++){ //going through all character at each time step
            //show_message(global.teamTwo[0].moveArray[tick]);
            if(global.teamOne[b].moveArray[tick] != 0){
               if(global.teamOne[b].moveArray[tick] == 3){
                    with(global.teamOne[b]){
                        if(place_meeting(x + GameMaster.moveDist, y, Character)){
                            p = instance_nearest(x + GameMaster.moveDist, y, Character);
                              for(var i = 0; i &lt; global.teamSize; i++){
                                    if(p == global.teamTwo[i]){
                                        GameMaster.charOne = global.teamOne[b];
                                        GameMaster.charTwo = p;
                                        
                                    }
                              }
                             if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                if(GameMaster.alarm[1] == -1) {
                                    GameMaster.alarm[1] = room_speed*.05;
                                }
                             }
                             else {
                                global.teamOne[b].x += GameMaster.moveDist;
                                global.teamOne[b].originRow += 1;
                             }                        
                        }
                        else{
                            global.teamOne[b].x += GameMaster.moveDist;
                            global.teamOne[b].originRow += 1;
                        }
                    }
                } else if (global.teamOne[b].moveArray[tick] == 4){
                    with(global.teamOne[b]){
                        if(place_meeting(x - GameMaster.moveDist, y, Character)){
                            p = instance_nearest(x - GameMaster.moveDist, y, Character);
                              for(var i = 0; i &lt; global.teamSize; i++){
                                    if(p == global.teamTwo[i]){
                                        GameMaster.charOne = global.teamOne[b];
                                        GameMaster.charTwo = p;
                                    }
                              }
                             if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                if(GameMaster.alarm[1] == -1) {
                                    GameMaster.alarm[1] = room_speed*.05;
                                }
                             }
                             else {
                                 global.teamOne[b].x -= GameMaster.moveDist;
                                global.teamOne[b].originRow -= 1;
                             }                        
                        }
                        else{
                            global.teamOne[b].x -= GameMaster.moveDist;
                            global.teamOne[b].originRow -= 1;
                        }
                    }
                }
                else if (global.teamOne[b].moveArray[tick] == 2){
                    with(global.teamOne[b]){
                        if(place_meeting(x, y + GameMaster.moveDist, Character)){
                            p = instance_nearest(x , y + GameMaster.moveDist, Character);
                              for(var i = 0; i &lt; global.teamSize; i++){
                                    if(p == global.teamTwo[i]){
                                        GameMaster.charOne = global.teamOne[b];
                                        GameMaster.charTwo = p;
                                        
                                    }
                              }
                             if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                if(GameMaster.alarm[1] == -1) {
                                    GameMaster.alarm[1] = room_speed*.05;
                                }
                             }
                             else {
                                global.teamOne[b].y += GameMaster.moveDist;
                                global.teamOne[b].originCol -= 1;
                             }                        
                        }
                        else{
                            global.teamOne[b].y += GameMaster.moveDist;
                            global.teamOne[b].originCol -= 1;
                        }
                    }
                } else {
                   with(global.teamOne[b]){
                        if(place_meeting(x, y - GameMaster.moveDist, Character)){
                            p = instance_nearest(x , y - GameMaster.moveDist, Character);
                              for(var i = 0; i &lt; global.teamSize; i++){
                                    if(p == global.teamTwo[i]){
                                        GameMaster.charOne = global.teamOne[b];
                                        GameMaster.charTwo = p;
                                        
                                    }
                              }
                             if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                if(GameMaster.alarm[1] == -1) {
                                    GameMaster.alarm[1] = room_speed*.05;
                                }
                             }
                             else {
                                global.teamOne[b].y -= GameMaster.moveDist;
                                global.teamOne[b].originCol += 1;
                             }                        
                        }
                        else{
                            global.teamOne[b].y -= GameMaster.moveDist;
                            global.teamOne[b].originCol += 1;
                        }
                    }
                }
               
            } 
            if(global.teamTwo[b].moveArray[tick] != 0){
                //show_message("moving");
                if(global.teamTwo[b].moveArray[tick] == 3){
                    with(global.teamTwo[b]){
                            if(place_meeting(x - GameMaster.moveDist, y, Character)){
                                p = instance_nearest(x - GameMaster.moveDist, y, Character);
                                  for(var i = 0; i &lt; global.teamSize; i++){
                                        if(p == global.teamOne[i]){
                                            GameMaster.charOne = global.teamTwo[b];
                                            GameMaster.charTwo = p;
                                        }
                                  }
                                 if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                    if(GameMaster.alarm[1] == -1) {
                                        GameMaster.alarm[1] = room_speed*.05;
                                    }
                                 }
                                 else {
                                     global.teamTwo[b].x -= GameMaster.moveDist
                                    global.teamTwo[b].originRow -= 1;
                                 }                        
                            }
                            else{
                                global.teamTwo[b].x -= GameMaster.moveDist
                                global.teamTwo[b].originRow -= 1;
                            }
                        }
                } else if (global.teamTwo[b].moveArray[tick] == 4){
                    with(global.teamTwo[b]){
                            if(place_meeting(x + GameMaster.moveDist, y, Character)){
                                p = instance_nearest(x + GameMaster.moveDist, y, Character);
                                  for(var i = 0; i &lt; global.teamSize; i++){
                                        if(p == global.teamOne[i]){
                                            GameMaster.charOne = global.teamTwo[b];
                                            GameMaster.charTwo = p;
                                        }
                                  }
                                 if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                    if(GameMaster.alarm[1] == -1) {
                                        GameMaster.alarm[1] = room_speed*.05;
                                    }
                                 }
                                 else {
                                      global.teamTwo[b].x += GameMaster.moveDist
                                      global.teamTwo[b].originRow += 1;
                                 }                        
                            }
                            else{
                                 global.teamTwo[b].x += GameMaster.moveDist
                                global.teamTwo[b].originRow += 1;
                            }
                        }
                }
                else if (global.teamTwo[b].moveArray[tick] == 2){
                    with(global.teamTwo[b]){
                            if(place_meeting(x, y - GameMaster.moveDist, Character)){
                                p = instance_nearest(x, y - GameMaster.moveDist, Character);
                                  for(var i = 0; i &lt; global.teamSize; i++){
                                        if(p == global.teamOne[i]){
                                            GameMaster.charOne = global.teamTwo[b];
                                            GameMaster.charTwo = p;
                                        }
                                  }
                                 if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                    if(GameMaster.alarm[1] == -1) {
                                        GameMaster.alarm[1] = room_speed*.05;
                                    }
                                 }
                                 else {
                                      global.teamTwo[b].y -= GameMaster.moveDist;
                                      global.teamTwo[b].originCol += 1;
                                 }                        
                            }
                            else{
                                 global.teamTwo[b].y -= GameMaster.moveDist;
                                global.teamTwo[b].originCol += 1;
                            }
                        }
                    
                    
                } else {
                    with(global.teamTwo[b]){
                            if(place_meeting(x, y + GameMaster.moveDist, Character)){
                                p = instance_nearest(x, y + GameMaster.moveDist, Character);
                                  for(var i = 0; i &lt; global.teamSize; i++){
                                        if(p == global.teamOne[i]){
                                            GameMaster.charOne = global.teamTwo[b];
                                            GameMaster.charTwo = p;
                                        }
                                  }
                                 if(GameMaster.charTwo != 0 &amp;&amp; GameMaster.charOne != 0){
                                    if(GameMaster.alarm[1] == -1) {
                                        GameMaster.alarm[1] = room_speed*.05;
                                    }
                                 }
                                 else {
                                      global.teamTwo[b].y += GameMaster.moveDist;
                                        global.teamTwo[b].originCol -= 1;
                                 }                        
                            }
                            else{
                                 global.teamTwo[b].y += GameMaster.moveDist;
                                    global.teamTwo[b].originCol -= 1;
                            }
                        }
                    
                    
                }
            }
            //show_message(string(global.teamOne[b].moveArray[tick].x)+ " "+ string(global.teamOne[b].moveArray[tick].x));
        }
        
        moveAlg = false;
        tick += 1;
        alarm[0] = room_speed*.25;

    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// determine win conditions
if(room == FullScreen){
    deadPlayersOne = 0;
    deadPlayersTwo = 0;
    for(var f = 0; f &lt; global.teamSize; f++){
        if(global.teamOne[f].hp &lt;= 0){ deadPlayersOne += 1;}
        if(global.teamTwo[f].hp &lt;= 0){ deadPlayersTwo += 1;}
    }
    if(deadPlayersOne == global.teamSize - 1){
        show_message("Player One's Team Has Been Extinguished#Player Two Wins!");
        for(i=0; i&lt;global.teamSize;i+=1)
            {
                global.teamOne[i].visible=false;
                global.teamTwo[i].visible=false;
            }
            with(PlayerOne)
            {
                instance_destroy();
            }
            with(PlayerTwo)
            {
                instance_destroy();
            }
        room_goto(MainMenu);
    } else if(deadPlayersTwo== global.teamSize - 1){
        show_message("Player Two's Team Has Been Extinguished#Player One Wins!");
        for(i=0; i&lt;global.teamSize;i+=1)
            {
                global.teamOne[i].visible=false;
                global.teamTwo[i].visible=false;
            }
            with(PlayerOne)
            {
                instance_destroy();
            }
            with(PlayerTwo)
            {
                instance_destroy();
            }
        room_goto(MainMenu);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drafting turns and text
if(room == Drafting){
    if(draftTurn == 0){
        selectedChar.turn = "Player 1's Turn to Draft";
    } else {
       selectedChar.turn = "Player 2's Turn to Draft"; 
    }
    selectedChar.name = selectedCharInfo.name;
    if(selectedCharInfo.alarm[0] == -1) { selectedCharInfo.alarm[0] = room_speed*0.05;}
    selectedChar.attack = selectedCharInfo.attack;
    selectedChar.defence = selectedCharInfo.defence;
    selectedChar.movement = selectedCharInfo.movement;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Live up date on lv screen
if(room==LevelUpMenu){
buttonCount =0; 
    for(i=0; i&lt;2; i++){
        for(j=0; j&lt;6; j++){
            if(buttonCount&lt;global.teamSize){
                // set player one's team buttons
                //TeamOne[i,j]=instance_create(teamOneX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamOne[i,j].spriteToDraw= global.teamOne[buttonCount].sprite_index;
                TeamOne[i,j].hpVal = floor(global.teamOne[buttonCount].hp);
                TeamOne[i,j].hpMax = global.teamOne[buttonCount].maxHp;
                TeamOne[i,j].attackVal = global.teamOne[buttonCount].attack;
                TeamOne[i,j].moveVal = global.teamOne[buttonCount].movement;
                TeamOne[i,j].defVal = global.teamOne[buttonCount].defence;
                
                // set player two's team buttons
                //TeamTwo[i,j]=instance_create(teamTwoX+(90+spacing)*j , teamY, BonusScreenCharacterButton);
                TeamTwo[i,j].spriteToDraw= global.teamTwo[buttonCount].sprite_index;
                TeamTwo[i,j].hpVal = floor(global.teamTwo[buttonCount].hp);
                TeamTwo[i,j].hpMax = global.teamTwo[buttonCount].maxHp;
                TeamTwo[i,j].attackVal = global.teamTwo[buttonCount].attack;
                TeamTwo[i,j].moveVal = global.teamTwo[buttonCount].movement;
                TeamTwo[i,j].defVal = global.teamTwo[buttonCount].defence;
                
                buttonCount++;
            }
            else{
                TeamOne[i,j] = 0;
                TeamTwo[i,j] = 0;
            }
        }
        teamY+=spacing+130;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Character Portraits Split screen
spriteIconScale = 3;
draw_set_halign(fa_center);
draw_set_font(players);

if(room == SplitScreen || room == FullScreen){
    for(var i = 0; i &lt; global.teamSize; i++){
        if(global.teamOne[i].hp &gt; 0){
            draw_sprite_ext(global.teamOne[i].sprite_index, 0,1530, 200 + i*36*spriteIconScale, spriteIconScale, spriteIconScale, 0, c_white, 1);
            draw_text(1550, 225 + 16*spriteIconScale + i*36*spriteIconScale, "HP: " + string(floor(global.teamOne[i].hp)) + "/" + string(global.teamOne[i].maxHp) + "#" + string(global.teamOne[i].attack) + "/" + string(global.teamOne[i].defence) + "/"+ string(global.teamOne[i].movement));
        } else {
            draw_sprite_ext(global.teamOne[i].sprite_index, 0,1530, 200 + i*36*spriteIconScale, spriteIconScale, spriteIconScale, 0, c_red, 1);
        }
        if(global.teamTwo[i].hp &gt; 0){
            draw_sprite_ext(global.teamTwo[i].sprite_index, 0,15, 200 + i*36*spriteIconScale, spriteIconScale, spriteIconScale, 0, c_white, 1);
            draw_text(45, 225 + 16*spriteIconScale + i*36*spriteIconScale, "HP: " + string(floor(global.teamTwo[i].hp)) + "/" + string(global.teamTwo[i].maxHp) + "#" + string(global.teamTwo[i].attack) + "/" + string(global.teamTwo[i].defence) + "/"+ string(global.teamTwo[i].movement));
        } else {
            draw_sprite_ext(global.teamTwo[i].sprite_index, 0,15, 200 + i*36*spriteIconScale, spriteIconScale, spriteIconScale, 0, c_red, 1);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving maps cheat key - moves down in maps
if(global.currentMap&gt;1){
        global.currentMap=global.currentMap-1; //increment current map
        global.setup=true;  //call setup for placing characters
        //global.teamOne[i].originRow=13 //hard coded for testing
        //global.teamOne[i].originCol = 5
        show_message("current map: "+ string(global.currentMap));
        
        //destroy both players so that they are recreated
        with(PlayerOne)
        {
            instance_destroy();
        }
        with(PlayerTwo)
        {
            instance_destroy();
        }
        room_goto(SplitScreen);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cheat key to move up in maps

        //check if not at the end of the board and if not move to new map
        if(global.currentMap&lt;global.gameSize){
            global.currentMap+=1; //increment current map
            global.setup=true;  //call setup for placing characters
            //global.teamTwo[i].moveArray = array(9);
            //global.teamTwo[i].originRow=13 //hard coded for testing
            //global.teamTwo[i].originCol = 5
            show_message("current map: "+ string(global.currentMap));
            
            //destroy both players so that they are recreated
            with(PlayerOne)
            {
                instance_destroy();
            }
            with(PlayerTwo)
            {
                instance_destroy();
            }
            
            room_goto(SplitScreen);
            }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cheat code to go to bonus menu
global.PlayerWon = 1;
PlayerOne.lvPoints = 10;
PlayerTwo.lvPoints = 10;
room_goto(BonusScreen);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
