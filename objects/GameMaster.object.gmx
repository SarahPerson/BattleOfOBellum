<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///intitial setup things
global.gameSize = 3

switch(global.currentMap)
{
    case 1:
        global.mapSize=15;
        global.spriteScaleSplit=2;
        global.spriteScaleFull=3.75;
        myFile=file_text_open_read("smallStrongholdR.txt");
        break;
        
    case 2:
        global.mapSize=30;
        global.spriteScaleSplit=1;
        global.spriteScaleFull=1.87;
        myFile= file_text_open_read("smallCity.txt");
        break;
    case 3:
    
        global.mapSize=15;
        global.spriteScaleSplit=2;
        global.spriteScaleFull=3.75;
        myFile=file_text_open_read("smallStrongholdL.txt");
        break
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup the players

if(!instance_exists(PlayerOne))
{
    instance_create(0,0,PlayerOne);
}

if(!instance_exists(PlayerTwo))
{
    instance_create(0,0,PlayerTwo);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup drafting screen
pool = ds_grid_create(12,2);
draftTurn = 0;

var newX=50;
var newY=50;
var buttonSpacing = 100;

if(room==Drafting)
{
    for( i=0; i&lt; 2; i+=1)
    {
        for(j=0; j&lt;12;j+=1)
        {
            newButton = instance_create(newX,newY,CharacterButton);
            pool[i,j]=newButton;
            newX+=buttonSpacing;      
        }

        newX=50;
        newY+=buttonSpacing;
    }
    
    //set all of the character sprites
    var j = 0;
    for(i=0; i&lt;24; i+=1)
    {
        pool[j,i%12].spriteToDraw=global.allCharacters[i];
        //show_message("tile "+ string(j)+" "+string(i%12)+ " " +string(pool[i%2,i%12]))
    
        
        if(i==11)
            j+=1;
    }
    
    //setting the initial highlighting position of player
GameMaster.pool[PlayerOne.draftRow, PlayerOne.draftCol].playerOneHighlighted=true;
GameMaster.pool[PlayerTwo.draftRow, PlayerTwo.draftCol].playerTwoHighlighted=true;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the objectives
instance_create(100,100,PlayerOneObjective);
instance_create(100,100,PlayerTwoObject);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up map
tick = 0;
moveAlg = false;
canRun = true;
mapNum = 2;
//myFile = file_text_open_read("smallCity.txt");
startingX = 100;
startingY = 100;
spriteScaleFull=global.spriteScaleFull ; //1.66666667 scaling of sprites to fit full screen top to bottom
spriteScaleSplit=global.spriteScaleSplit; //1.66666667 scaling of sprites to fit full screen top to bottom

switch(room){
    
    case Stronghold:
        var i, j, z;
        for (i = 0; i &lt; global.mapSize; i += 1)
           {
           for (j = 0; j &lt; global.mapSize; j += 1)
              {
                tempTile = instance_create(j*16, i*16, Tile);
                global.roomTiles[tempTile.x/16,tempTile.y/16] = tempTile;
                var temp = file_text_read_real(myFile);
                global.roomTiles[j,i].tileType = temp;
                
                for(z=0; z&lt;global.teamSize; z+=1)
                {
                    if(global.teamOne[z].row==i &amp;&amp; global.teamOne[z].col==j)
                    {
                        global.teamOne[z].x = global.roomTiles[j,i].x;
                        global.teamOne[z].y = global.roomTiles[j,i].y;
                    }
                     if(global.teamTwo[z].row==i &amp;&amp; global.teamTwo[z].col==j)
                    {
                        global.teamTwo[z].x = global.roomTiles[j,i].x;
                        global.teamTwo[z].y = global.roomTiles[j,i].y;
                    }
                }
                
                //Set the objectives
                //check if objective one goes on this tile
                if(PlayerOneObjective.row==i &amp;&amp; PlayerOneObjective.col==j)
                {
                    PlayerOneObjective.x = global.roomTiles[j,i].x;
                    PlayerOneObjective.y = global.roomTiles[j,i].y;    
                }
                //check if objective two goes on this tile
                if(PlayerTwoObject.row==i &amp;&amp; PlayerTwoObject.col==j)
                {
                    PlayerTwoObject.x = global.roomTiles[j,i].x;
                    PlayerTwoObject.y = global.roomTiles[j,i].y;    
                }
              }
           }
           
        break;
    case FullScreen: 
        // for full screen
        
       //TODO______________________________________________________________________________
        startingX=350;
        global.startingX = startingX;
        startingY=0;
        global.startingY = startingY;
        
        
        tilePosConst = 16*spriteScaleFull;
        //set initial ds grid
        var i, j, z;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
        for (j = 0; j &lt; global.mapSize; j += 1)
           {
             tempTile = instance_create(j*16, i*16, Tile);
             global.roomTiles[tempTile.x/(16),tempTile.y/(16)] = tempTile;
             var temp = file_text_read_real(myFile);
             global.roomTiles[j,i].tileType = temp;
           }
        }
        
        //rotate the grid

        rotatedGrid = ds_grid_create(global.mapSize,global.mapSize);
        
        for (i = 0; i &lt;global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
            {
                rotatedGrid[j,global.mapSize-i-1]=global.roomTiles[i,j].id;
                rotatedGrid[j,global.mapSize-i-1].tileType=global.roomTiles[i,j].tileType;
                
            }
        }
        
        //draw grid
        for (i = 0; i &lt;global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
            {
                rotatedGrid[i,j].image_xscale=spriteScaleFull;
                rotatedGrid[i,j].image_yscale=spriteScaleFull;
                rotatedGrid[i,j].x=i*tilePosConst+startingX;
                rotatedGrid[i,j].y=j*tilePosConst+startingY;              
            }
        }
        
        //place characters and objectives
        for(z=0; z&lt;global.teamSize; z+=1){
            n=global.teamOne[z].originRow
            global.teamOne[z].row = global.mapSize-global.teamOne[z].originCol-1;
            global.teamOne[z].col = n;

            n=global.teamTwo[z].originRow    
            global.teamTwo[z].row = global.mapSize-global.teamTwo[z].originCol-1;
            global.teamTwo[z].col= n;
            
            //show_message(global.teamTwo[z].moveArray[2]);
        }
        
        //Set the objectives
        n=PlayerOneObjective.originRow;
        PlayerOneObjective.row = global.mapSize-PlayerOneObjective.originCol-1;
        PlayerOneObjective.col = n;    
      
        //check if objective two goes on this tile

        n=PlayerTwoObject.originRow;
        PlayerTwoObject.row = global.mapSize-PlayerTwoObject.originCol-1;
        PlayerTwoObject.col = n;
        
        for(z=0; z&lt;global.teamSize; z+=1)
        {
            //set team one characters    
            global.teamOne[z].image_xscale=spriteScaleFull;
            global.teamOne[z].image_yscale=spriteScaleFull;
            global.teamOne[z].x = global.teamOne[z].col*tilePosConst+startingX;
            global.teamOne[z].y = global.teamOne[z].row*tilePosConst+startingY;
            
            //set team two characters
            global.teamTwo[z].image_xscale=spriteScaleFull;
            global.teamTwo[z].image_yscale=spriteScaleFull;
            global.teamTwo[z].x = global.teamTwo[z].col*tilePosConst+startingX;
            global.teamTwo[z].y = global.teamTwo[z].row*tilePosConst+startingY;
           
            //set objects
            PlayerOneObjective.image_xscale=spriteScaleFull;
            PlayerOneObjective.image_yscale=spriteScaleFull;
            PlayerOneObjective.x = PlayerOneObjective.col*tilePosConst+startingX;
            PlayerOneObjective.y = PlayerOneObjective.row*tilePosConst+startingY;

            PlayerTwoObject.image_xscale=spriteScaleFull;
            PlayerTwoObject.image_yscale=spriteScaleFull;
            PlayerTwoObject.x = PlayerTwoObject.col*tilePosConst+startingX;
            PlayerTwoObject.y = PlayerTwoObject.row*tilePosConst+startingY;               

        }
        //set initial position of the players cursors - we no need cursors on this screen
        //global.roomTiles[PlayerOne.curCol,PlayerOne.curRow].playerOneSelected=true;
        //global.roomTiles[PlayerTwo.curCol,PlayerTwo.curRow].playerTwoSelected=true;
                
        break;     
        
    case SplitScreen:
        
       //TODO___________________________________________________________________________________
        startingXOne=160;
        global.startingXOne=startingXOne
        startingXTwo=960;
        global.startingXTwo=startingXTwo;
        startingY=210;
        global.startingY=startingY;
        //______________________________________________________________________________________
        
        tilePosConst = 16*spriteScaleSplit;
        //set initial ds grid
        var i, j, z;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
        for (j = 0; j &lt; global.mapSize; j += 1)
           {
             tempTile = instance_create(j*tilePosConst+startingY*16, 16*i*tilePosConst+startingXTwo, Tile);
             global.roomTiles[j,i] = tempTile;
             var temp = file_text_read_real(myFile);
             global.roomTiles[j,i].tileType = temp;
           }
        }
        
        //Make one copy
        //gridTwo = ds_grid_create(global.mapSize,global.mapSize); -&gt; moved to global
        var temp;
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
               {
                    //make flipped copy of player two 
                    temp=instance_create(0,0,Tile);
                    temp.tileType = global.roomTiles[global.mapSize-i-1,global.mapSize-j-1].tileType;
                    global.gridTwo[i,j]=temp;
               }
        }
        
        //draw the things
        for (i = 0; i &lt; global.mapSize; i += 1)
        {
            for (j = 0; j &lt; global.mapSize; j += 1)
                {
                    //move player ones grid into position
                    global.roomTiles[i,j].image_xscale=spriteScaleSplit;
                    global.roomTiles[i,j].image_yscale=spriteScaleSplit;
                    global.roomTiles[i,j].x=i*tilePosConst+startingXTwo;
                    global.roomTiles[i,j].y=j*tilePosConst+startingY;  
                    
                    //move player twos grid into position
                    global.gridTwo[i,j].image_xscale=spriteScaleSplit;
                    global.gridTwo[i,j].image_yscale=spriteScaleSplit;
                    global.gridTwo[i,j].x=i*tilePosConst+startingXOne;
                    global.gridTwo[i,j].y=j*tilePosConst+startingY; 
                    
                }
        }
        
        //place origins of cursors
        global.roomTiles[PlayerOne.curCol,PlayerOne.curRow].playerOneSelected=true;
        global.gridTwo[PlayerTwo.curCol,PlayerTwo.curRow].playerTwoSelected=true;
        
        
        //place characters and objectives - move player one to opposite side of grid
        for(z=0; z&lt;global.teamSize; z+=1){
            global.teamTwo[z].col = global.mapSize-global.teamTwo[z].originCol-1;
            global.teamTwo[z].row = global.mapSize-global.teamTwo[z].originRow-1;
  
            global.teamOne[z].col = global.teamOne[z].originCol;
            global.teamOne[z].row= global.teamOne[z].originRow;
        }
        
        //Set the objectives
        PlayerOneObjective.col = global.mapSize-PlayerOneObjective.originCol-1;
        PlayerOneObjective.row = global.mapSize-PlayerOneObjective.originRow-1;    
      
        //check if objective two goes on this tile
        PlayerTwoObject.col = PlayerTwoObject.originCol;
        PlayerTwoObject.row =PlayerTwoObject.originRow;
        
        for(z=0; z&lt;global.teamSize; z+=1)
        {
            //set team one characters    
            global.teamOne[z].image_xscale=spriteScaleSplit;
            global.teamOne[z].image_yscale=spriteScaleSplit;
            global.teamOne[z].x = global.teamOne[z].col*tilePosConst+startingXTwo;
            global.teamOne[z].y = global.teamOne[z].row*tilePosConst+startingY;
            
            //set team two characters
            global.teamTwo[z].image_xscale=spriteScaleSplit;
            global.teamTwo[z].image_yscale=spriteScaleSplit;
            global.teamTwo[z].x = global.teamTwo[z].col*tilePosConst+startingXOne ;
            global.teamTwo[z].y = global.teamTwo[z].row*tilePosConst+startingY;
           
            //set objects
            PlayerOneObjective.image_xscale=spriteScaleSplit;
            PlayerOneObjective.image_yscale=spriteScaleSplit;
            PlayerOneObjective.x = PlayerOneObjective.col*tilePosConst+startingXOne;
            PlayerOneObjective.y = PlayerOneObjective.row*tilePosConst+startingY;

            PlayerTwoObject.image_xscale=spriteScaleSplit;
            PlayerTwoObject.image_yscale=spriteScaleSplit;
            PlayerTwoObject.x = PlayerTwoObject.col*tilePosConst+startingXTwo;
            PlayerTwoObject.y = PlayerTwoObject.row*tilePosConst+startingY;               

        }
        
        //Copy teams and draw seconds on screen
        copyTeamOne = array(global.teamSize);
        
        for (z=0; z&lt; global.teamSize; z+=1)
        {
            if(global.teamOne[z].hp&gt;0){
                copyTeamOne[z] = instance_create(0,0, Character);
                copyTeamOne[z].sprite_index = global.teamOne[z].sprite_index;
                copyTeamOne[z].originRow = global.mapSize-global.teamOne[z].originRow-1;
                copyTeamOne[z].originCol = global.mapSize-global.teamOne[z].originCol-1;
                
                //move to correct location
                copyTeamOne[z].image_xscale=spriteScaleSplit;
                copyTeamOne[z].image_yscale=spriteScaleSplit;
                copyTeamOne[z].x = copyTeamOne[z].originCol*tilePosConst+startingXOne;
                copyTeamOne[z].y = copyTeamOne[z].originRow*tilePosConst+startingY;
            }
            
            if(global.teamTwo[z].hp&gt;0){
                copyTeamTwo[z] = instance_create(0,0, Character);
                copyTeamTwo[z].sprite_index = global.teamTwo[z].sprite_index;
                copyTeamTwo[z].originRow = global.teamTwo[z].originRow;
                copyTeamTwo[z].originCol = global.teamTwo[z].originCol;
                
                //set team one characters    
                copyTeamTwo[z].image_xscale=spriteScaleSplit;
                copyTeamTwo[z].image_yscale=spriteScaleSplit;
                copyTeamTwo[z].x = copyTeamTwo[z].originCol*tilePosConst+startingXTwo;
                copyTeamTwo[z].y = copyTeamTwo[z].originRow*tilePosConst+startingY;
            }
        }
            //set objects Copies
            PlayerOneObjectiveCopy = instance_create(0,0, PlayerOneObjective);
            PlayerOneObjectiveCopy.col=PlayerOneObjective.col;
            PlayerOneObjectiveCopy.col = global.mapSize - PlayerOneObjectiveCopy.col -1;
            PlayerOneObjectiveCopy.row=PlayerOneObjective.row
            PlayerOneObjectiveCopy.row = global.mapSize - PlayerOneObjectiveCopy.row -1;
            
            PlayerOneObjectiveCopy.image_xscale=spriteScaleSplit;
            PlayerOneObjectiveCopy.image_yscale=spriteScaleSplit;
            PlayerOneObjectiveCopy.x = PlayerOneObjectiveCopy.col*tilePosConst+startingXTwo;
            PlayerOneObjectiveCopy.y = PlayerOneObjectiveCopy.row*tilePosConst+startingY;

            PlayerTwoObjectiveCopy = instance_create(0,0, PlayerTwoObject);
            PlayerTwoObjectiveCopy.col=PlayerTwoObject.col;
            PlayerTwoObjectiveCopy.col = global.mapSize - PlayerTwoObjectiveCopy.col -1;
            PlayerTwoObjectiveCopy.row=PlayerTwoObject.row
            PlayerTwoObjectiveCopy.row = global.mapSize - PlayerTwoObjectiveCopy.row -1;
            
            PlayerTwoObjectiveCopy.image_xscale=spriteScaleSplit;
            PlayerTwoObjectiveCopy.image_yscale=spriteScaleSplit;
            PlayerTwoObjectiveCopy.x = PlayerTwoObjectiveCopy.col*tilePosConst+startingXOne;
            PlayerTwoObjectiveCopy.y = PlayerTwoObjectiveCopy.row*tilePosConst+startingY;
            
            if(global.setup){
                for (i = 0; i &lt; global.mapSize; i += 1)
                {
                    global.roomTiles[i,global.mapSize-2].canMove = true;
                    global.roomTiles[i,global.mapSize-1].canMove = true;
                    global.gridTwo[i,global.mapSize-2].canMove = true;
                    global.gridTwo[i,global.mapSize-1].canMove = true;
                }
            }
        break;  

    }        

file_text_close(myFile);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///global variable for room
//size = ds_grid_width(global.roomTiles);
charOne = 0;
charTwo = 0;
toMove = 0;
/*
switch(mapNum){
    case 1:
        global.roomSize = 30;
        break;
    case 2: 
        global.roomSize = 30;
        break;
}
*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set visibility of characters based on room
if( room== Drafting){
    for(i=0; i&lt; global.teamSize;i+=1){
        global.teamOne[i].visible=false;
        global.teamTwo[i].visible=false;
        PlayerOneObjective.visible=false;
        PlayerTwoObject.visible=false;
    }
}
if(room!=Drafting){
    for(i=0; i&lt; global.teamSize;i+=1){
        global.teamOne[i].visible=true;
        global.teamTwo[i].visible=true;
        PlayerOneObjective.visible=true;
        PlayerTwoObject.visible=true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if in drafting screen create draft text
if(room==Drafting)
{
    instance_create(0,0,DraftTextPlayerTwo);
    instance_create(0,0, DraftTextPlayerOne);
    selectedChar = instance_create(0,0,CharInfo);
    selectedCharInfo = instance_create(500, 500, Character);
    selectedCharInfo.visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set move alg to true

moveStack = ds_stack_create();
curSpot = 0;
nextSlot = 0;
tick = 0;


if(toMove.destTile != 0){
  tempTile = toMove.destTile;
  while(tempTile != 0){
      ds_stack_push(moveStack, tempTile);
      tempTile = tempTile.originTile;
  }

  switch(toMove.movement){
      case 1:
          nextSlot = array(1);
          nextSlot[0] = 8;
      break;
      case 2:
          nextSlot = array(2);   
          nextSlot[0] = 3;
          nextSlot[1] = 7;
      break;
      case 3:
          nextSlot = array(3);
          nextSlot[0] = 2;
          nextSlot[1] = 5;
          nextSlot[2] = 8;
      break;
      case 4:
          nextSlot = array(4);
          nextSlot[0] = 1;
          nextSlot[1] = 3;
          nextSlot[2] = 5;
          nextSlot[3] = 7;
      break;
      case 5:
          nextSlot = array(5);
          nextSlot[0] = 0;
          nextSlot[1] = 2;
          nextSlot[2] = 4;
          nextSlot[3] = 6;
          nextSlot[4] = 8;
      break;
      case 6:
          nextSlot = array(6);
          nextSlot[0] = 0;
          nextSlot[1] = 2;
          nextSlot[2] = 3;
          nextSlot[3] = 5;
          nextSlot[4] = 6;
          nextSlot[5] = 8;
      break;
      case 7:
          nextSlot = array(7);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 3;
          nextSlot[3] = 4;
          nextSlot[4] = 6;
          nextSlot[5] = 7;
          nextSlot[6] = 8;
      break;
      case 8:
          nextSlot = array(8);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 2;
          nextSlot[3] = 3;
          nextSlot[4] = 4;
          nextSlot[5] = 5;
          nextSlot[6] = 6;
          nextSlot[7] = 7;
      break;
      case 9:
          nextSlot = array(9);
          nextSlot[0] = 0;
          nextSlot[1] = 1;
          nextSlot[2] = 2;
          nextSlot[3] = 3;
          nextSlot[4] = 4;
          nextSlot[5] = 5;
          nextSlot[6] = 6;
          nextSlot[7] = 7;
          nextSlot[8] = 8;
      break;
  }
  ds_stack_pop(moveStack);
  toMove.moveArray = array(9);
  while(!ds_stack_empty(moveStack)){
      tempTile = ds_stack_pop(moveStack);
      while(tempTile.cost != 1){
          tempTile.cost -= 1;
          curSpot += 1;
      }
      
      toMove.moveArray[nextSlot[curSpot]] = tempTile.originDirect;
      curSpot += 1;
      //show_message("MoveArray: " + string(tempTile));
  }
  curSpot = 0;
}
//set the current cursor locations to not highlight





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///combat alg
switch(charOne.attack){
    case 1:
    var P = random_range(1,5);
    charOne.attackArray[0] = P/3;
    charOne.attackArray[1] = P/3;
    charOne.attackArray[2] = P/3;
    break;
    case 2:
    var p = random_range(1,5);
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = p/2;
    charOne.attackArray[2] = p/2;
    break;
    case 3:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charOne.attackArray[0] = random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charOne.attackArray[0] = random_range(1,5) + random_range(1,5);
    charOne.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charOne.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}
switch(charTwo.attack){
    case 1:
    var p = random_range(1,5);
    charTwo.attackArray[0] = p/3;
    charTwo.attackArray[1] = p/3;
    charTwo.attackArray[2] = p/3;
    break;
    case 2:
    var p = random_range(1,5);
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = p/2;
    charTwo.attackArray[2] = p/2;
    break;
    case 3:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 4:
    charTwo.attackArray[0] = random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5);
    break;
    case 5:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 6:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 7:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 8:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + 1;
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
    case 9:
    charTwo.attackArray[0] = random_range(1,5) + random_range(1,5);
    charTwo.attackArray[1] = random_range(1,5) + random_range(1,5) + random_range(1,5);
    charTwo.attackArray[2] = random_range(1,5) + random_range(1,5);
    break;
}
var sum1 = 0;
var sum2 = 0;
for(var g = 0; g &lt; 3; g++){  
    if(random_range(0,45) &gt; charOne.movement){ charOne.hp -= charTwo.attackArray[g]; sum2 += charTwo.attackArray[g];}
    if(random_range(0,45) &gt; charTwo.movement){ charTwo.hp -= charOne.attackArray[g]; sum1 += charOne.attackArray[g];}
}

for(var o = tick - 1; o &gt;= 0; o--){
     if(charOne.moveArray[o] != 0){
     show_message(charOne.moveArray[o]);
         if(charOne.moveArray[o] == 3){
                 charOne.x -= moveDist
                 charOne.originRow -= 1;
             } else if (charTwo.moveArray[o] == 4){
                 charOne.x += moveDist
                 charOne.originRow += 1;
             }
             else if (charTwo.moveArray[o] == 2){
                 charOne.y -= moveDist;
                 charOne.originCol += 1;
             } else {
                 charOne.y += moveDist;
                 charOne.originCol -= 1;
             }
         charOne.moveArray = array(9);
     }
     if(charTwo.moveArray[o] != 0){
     show_message(charTwo.moveArray[o]);
         if(charTwo.moveArray[o] == 3){
                 charTwo.x += moveDist
                 charTwo.originRow += 1;
             } else if (charTwo.moveArray[o] == 4){
                 charTwo.x -= moveDist
                 charTwo.originRow -= 1;
             }
             else if (charTwo.moveArray[o] == 2){
                 charTwo.y += moveDist;
                 charTwo.originCol -= 1;
             } else {
                 charTwo.y -= moveDist;
                 charTwo.originCol += 1;
             }
         charTwo.moveArray = array(9);
     }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sets can run
if(tick &lt; 9){ moveAlg = true; } else {tick = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simul movement algorithm

//time step
moveDist = 16*global.spriteScaleFull;
    if(moveAlg){
    //show_message("Alg");
        for(var b = 0; b &lt; global.teamSize; b++){ //going through all character at each time step
            //show_message(global.teamTwo[0].moveArray[tick]);
            if(global.teamOne[b].moveArray[tick] != 0){
               if(global.teamOne[b].moveArray[tick] == 3){
                    global.teamOne[b].x += moveDist;
                    global.teamOne[b].originRow += 1;
                } else if (global.teamOne[b].moveArray[tick] == 4){
                    global.teamOne[b].x -= moveDist;
                    global.teamOne[b].originRow -= 1;
                }
                else if (global.teamOne[b].moveArray[tick] == 2){
                    global.teamOne[b].y += moveDist;
                    global.teamOne[b].originCol -= 1;
                } else {
                    global.teamOne[b].y -= moveDist;
                    global.teamOne[b].originCol += 1;
                }
               
            } 
            if(global.teamTwo[b].moveArray[tick] != 0){
                //show_message("moving");
                if(global.teamTwo[b].moveArray[tick] == 3){
                    global.teamTwo[b].x -= moveDist
                    global.teamTwo[b].originRow -= 1;
                } else if (global.teamTwo[b].moveArray[tick] == 4){
                    global.teamTwo[b].x += moveDist
                    global.teamTwo[b].originRow += 1;
                }
                else if (global.teamTwo[b].moveArray[tick] == 2){
                    global.teamTwo[b].y -= moveDist;
                    global.teamTwo[b].originCol += 1;
                } else {
                    global.teamTwo[b].y += moveDist;
                    global.teamTwo[b].originCol -= 1;
                }
            }
            //show_message(string(global.teamOne[b].moveArray[tick].x)+ " "+ string(global.teamOne[b].moveArray[tick].x));
        }
        
        moveAlg = false;
        tick += 1;
        alarm[0] = room_speed*.25;

    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// determine win conditions
if(room == FullScreen){
    deadPlayersOne = 0;
    deadPlayersTwo = 0;
    for(var f = 0; f &lt; global.teamSize; f++){
        if(global.teamOne[f].hp &lt;= 0){ deadPlayersOne += 1;}
        if(global.teamOne[f].hp &lt;= 0){ deadPlayersTwo += 1;}
    }
    if(deadPlayersOne == global.teamSize - 1){
        show_message("Player One's Team Has Been Extinguished#Player Two Wins!");
        for(i=0; i&lt;global.teamSize;i+=1)
            {
                global.teamOne[i].visible=false;
                global.teamTwo[i].visible=false;
            }
        room_goto(MainMenu);
    } else if(deadPlayersTwo== global.teamSize - 1){
        show_message("Player Two's Team Has Been Extinguished#Player One Wins!");
        for(i=0; i&lt;global.teamSize;i+=1)
            {
                global.teamOne[i].visible=false;
                global.teamTwo[i].visible=false;
            }
        room_goto(MainMenu);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drafting turns and text
if(room == Drafting){
    if(draftTurn == 0){
        selectedChar.turn = "Player 1's Turn to Draft";
    } else {
       selectedChar.turn = "Player 2's Turn to Draft"; 
    }
    selectedChar.name = selectedCharInfo.sprite_index;
    selectedChar.attack = selectedCharInfo.attack;
    selectedChar.defence = selectedCharInfo.defence;
    selectedChar.movement = selectedCharInfo.movement;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
