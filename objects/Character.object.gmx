<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Soldier</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
isSelected = false;

moveArray = array(9);
attackArray = array(3);
destTile = 0;

movement = 4;
attack = 4;
defence = 4;
hp = 0;
maxHp = 0;
attackDice = 4;

//initial position
originRow= 0;
originCol=0;

row = 27;
col = 27;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///increase HP
switch(hp){
    case 2:
        maxHp += 15;
        hp += 15;
        break;
    case 3:
        maxHp += 12;
        hp += 12;
        break;
    case 4:
         maxHp += 11;
        hp += 11;
        break;
    case 5:
        maxHp += 9;
        hp += 9;
        break;
    case 6:
        maxHp += 8;
        hp += 8;
        break;
    case 7:
        maxHp += 6;
        hp += 6;
        break;
    case 8:
        maxHp += 5;
        hp += 5;
        break;
    case 9:
        maxHp += 4;
        hp = 4;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Initial Stats

switch(sprite_index){
    case Angont:
        movement = 4;
        attack = 4;
        defence = 4;
        break;
    case Beyla:
        movement = 7;
        attack = 1;
        defence = 4;
        break;
    case Jadzia:
        movement = 4;
        attack = 7;
        defence = 1;
        break;
    case Khufu:
        movement = 4;
        attack = 4;
        defence = 4;
        break;
    case Marinka:
        movement = 7;
        attack = 1;
        defence = 4;
        break;
    case Tashi:
        movement = 4;
        attack = 1;
        defence = 7;
        break;
    case Theseus:
        movement = 4;
        attack = 1;
        defence = 7;
        break;
    case Mavia:
        movement = 1;
        attack = 7;
        defence = 4;
        break;
    case Warlock:
        movement = 7;
        attack = 4;
        defence = 1;
        break;
    case Ent:
        movement = 1;
        attack = 7;
        defence = 4;
        break;
    case MechWarrior:
        movement = 1;
        attack = 4;
        defence = 7;
        break;
     case Pixie:
        movement = 7;
        attack = 4;
        defence = 1;
        break;
    default:
        movement = 0;
        attack = 0;
        defence = 0;
        break;
    
}
switch(defence){
    case 0:
        hp = 0;
        break;
    case 1:
        maxHp = 30;
        hp = 30;
        break;
    case 2:
        maxHp = 45;
        hp = 45;
        break;
    case 3:
        maxHp = 57;
        hp = 57;
        break;
    case 4:
        maxHp = 68;
        hp = 68;
        break;
    case 5:
        maxHp = 77;
        hp = 77;
        break;
    case 6:
        maxHp = 85;
        hp = 85;
        break;
    case 7:
        maxHp = 91;
        hp = 91;
        break;
    case 8:
        maxHp = 96;
        hp = 96;
        break;
    case 9:
        maxHp = 100;
        hp = 100;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dying and Movement
//only do when in battle screens
if(room==SplitScreen || room== FullScreen){
    if(hp &lt;= 0) { 
        for(var i = 0; i &lt; global.teamSize; i++){
            if(self == global.teamOne[i]){
                if(room == SplitScreen){
                    //show_message(visible);
                    y = global.startingY + (global.mapSize + 1)*global.spriteScaleSplit*16;
                    x = global.startingXTwo - global.teamSize/2*global.spriteScaleSplit*16 + i*global.spriteScaleSplit*16 + global.mapSize*global.spriteScaleSplit*16/2;
                } else if (room == FullScreen){
                    y = window_get_height()/2 ;
                    x = 350*1.5+ global.mapSize*16*global.spriteScaleFull + i*global.spriteScaleFull*16 - global.teamSize/2*16*global.spriteScaleFull;
                   
                } 
            } else if (self == global.teamTwo[i]){
                if(room == SplitScreen){
                    y = global.startingY + (global.mapSize + 1)*global.spriteScaleSplit*16;
                    x = global.startingXOne - global.teamSize/2*global.spriteScaleSplit*16 + i*global.spriteScaleSplit*16 + global.mapSize*global.spriteScaleSplit*16/2;
                } else if (room == FullScreen){
                    y = window_get_height()/2 ;
                     x = i*global.spriteScaleFull*16 + 350/2 - global.teamSize/2*16*global.spriteScaleFull;
                }
            } 
        }
        //set character to invisible once it dies
        visible=false; //can't do this yet because for some reason it set an entire team to invisible 
    }
    else{
       
    }
}
if(room == SplitScreen){ if(destTile != 0) { destTile.sprite_index = isSelectedSprite; }}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="PlayerOneObjective">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if character in team one do objective reaching things
if(room==FullScreen){
    for ( i=0; i&lt;global.teamSize;i+=1){
        if(self.sprite_index==global.teamTwo[i].sprite_index)
        {
            show_message("Player Two Reached the Objective!")
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
